@* Add this using statement at the top of your view *@
@using Erp.WebApp.ViewModels  @*<-- IMPORTANT: Replace 'YourProject' with your actual project name *@
@model DashboardViewModel
@using System.Globalization

@{
    ViewBag.Title = "Admin Dashboard";
    var currencySymbol = Model.CurrencySymbol ?? "֏";
}

<!-- Fonts, Icons & Chart.js Library -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&family=Poppins:wght@600;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js"></script>

<style>
    :root {
        --bg: #f5f7fb;
        --bg-accent: radial-gradient(1200px 600px at 10% -10%, #eaf1ff 0%, transparent 60%),
                     radial-gradient(900px 600px at 110% 0%, #fff6ea 0%, transparent 55%);
        --text: #0f172a;
        --text-muted: #64748b;
        --card-bg: #ffffffcc;
        --card-border: #e7eaf3;
        --glass: blur(12px);
        --shadow: 0 10px 30px -10px rgba(13, 18, 54, 0.15);
        --shadow-hover: 0 20px 45px -12px rgba(13, 18, 54, 0.22);
        --grid: rgba(15, 23, 42, 0.08);
        --tick: rgba(15, 23, 42, 0.55);
        --title-grad: linear-gradient(90deg, #6b8cff, #7c5cff 45%, #00e1ff 90%);
        --ring: #c6d6ff;
        --skeleton: #e2e8f0;

        --success-1: #22c55e; --success-2: #10b981;
        --info-1: #3b82f6;   --info-2: #06b6d4;
        --violet-1: #7c3aed; --violet-2: #a78bfa;
        --warn-1: #f59e0b;   --warn-2: #f97316;
        --danger-1: #ef4444; --danger-2: #fb7185;
    }
    [data-theme="dark"] {
        --bg: #0b1220;
        --bg-accent: radial-gradient(1200px 600px at 0% -10%, rgba(124,92,255,.18) 0%, transparent 60%),
                     radial-gradient(900px 600px at 120% 0%, rgba(0,225,255,.16) 0%, transparent 55%);
        --text: #e8eefc;
        --text-muted: #9fb0d1;
        --card-bg: #121a2ecc;
        --card-border: #1f2a44;
        --glass: blur(10px);
        --shadow: 0 10px 30px -14px rgba(0, 0, 0, 0.6);
        --shadow-hover: 0 20px 60px -18px rgba(0, 0, 0, 0.65);
        --grid: rgba(148, 163, 184, 0.18);
        --tick: rgba(226, 232, 240, 0.7);
        --title-grad: linear-gradient(90deg, #9eb4ff, #c6b7ff 50%, #9ff7ff 95%);
        --ring: #334155;
        --skeleton: #334155;
    }

    html, body {
        background: var(--bg); color: var(--text);
        font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans";
        -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;
        transition: background .3s ease, color .3s ease;
    }
    body::before {
        content: ""; position: fixed; inset: 0;
        background: var(--bg-accent); pointer-events: none; z-index: -1;
        transition: background .3s ease;
    }
    .container-fluid { position: relative; z-index: 1; padding-top: 2rem; padding-bottom: 2rem; }
    .page-header {
        display: flex; align-items: center; justify-content: space-between;
        gap: 16px; margin-bottom: 24px; flex-wrap: wrap;
    }
    .title-wrap h1 {
        margin: 0; font-family: Poppins, Inter, system-ui;
        font-size: clamp(24px, 2.2vw, 36px); font-weight: 700; letter-spacing: -0.02em;
        background: var(--title-grad); -webkit-background-clip: text; background-clip: text; color: transparent;
    }
    .subtle { color: var(--text-muted); font-size: 0.95rem; margin-top: 4px; }
    .header-actions { display: inline-flex; gap: 12px; align-items: center; flex-wrap: wrap; }
    .theme-toggle, .ui-select {
        display: inline-flex; align-items: center; gap: 10px; padding: 10px 14px; border-radius: 999px;
        background: var(--card-bg); border: 1px solid var(--card-border);
        box-shadow: var(--shadow); cursor: pointer; user-select: none;
        transition: all .25s ease; color: var(--text); font-weight: 600;
    }
    .theme-toggle:hover, .ui-select:hover { transform: translateY(-2px) scale(1.02); box-shadow: var(--shadow-hover); border-color: var(--ring); }
    .theme-toggle .dot {
        width: 22px; height: 22px; border-radius: 50%;
        background: radial-gradient(circle at 30% 30%, #ffd36e 0%, #ffb703 60%, #f59e0b 100%);
        box-shadow: inset 0 0 0 2px rgba(255,255,255,.15), 0 6px 14px rgba(249, 115, 22, .35);
        flex-shrink: 0; transition: all .3s ease-in-out;
    }
    [data-theme="dark"] .theme-toggle .dot {
        background: radial-gradient(circle at 40% 40%, #90caf9 0%, #60a5fa 60%, #3b82f6 100%);
        box-shadow: inset 0 0 0 2px rgba(255,255,255,.08), 0 6px 16px rgba(59, 130, 246, .35);
    }
    .ui-select select { appearance: none; background: transparent; border: none; color: inherit; font: inherit; outline: none; padding-right: 18px; cursor: pointer; }
    .ui-select .icon { font-size: 0.9rem; opacity: .7; }

    .card {
        border: 1px solid var(--card-border); background: var(--card-bg);
        backdrop-filter: var(--glass); border-radius: 16px; box-shadow: var(--shadow);
        transition: transform .3s ease, box-shadow .3s ease, border-color .3s ease;
    }
    .card:hover { transform: translateY(-4px); box-shadow: var(--shadow-hover); border-color: var(--ring); }
    .card .card-header {
        font-weight: 700; color: var(--text); border-bottom: 1px solid var(--card-border);
        padding: 16px 20px; display: flex; align-items: center; justify-content: space-between; gap: 12px;
    }
    .card .card-body { padding: 20px; }
    .card-title-icon { color: var(--info-1); font-size: 1.1rem; }

    .kpi-card { position: relative; overflow: hidden; color: white; border: none; }
    .kpi-card .card-body { position: relative; z-index: 2; }
    .kpi-card .card-title { font-weight: 600; font-size: 0.85rem; text-transform: uppercase; letter-spacing: .06em; opacity: .95; }
    .kpi-card .kpi-value { font-size: clamp(26px, 1.6vw, 36px); font-weight: 800; letter-spacing: -0.02em; line-height: 1.15; }
    .kpi-trend { margin-top: 8px; font-size: 0.9rem; font-weight: 600; opacity: .95; display: inline-flex; align-items: center; gap: 6px; padding: 6px 10px; border-radius: 999px; background: rgba(255,255,255,.14); backdrop-filter: blur(6px); }
    .kpi-card .card-icon { position: absolute; right: -28px; bottom: -28px; font-size: 110px; opacity: 0.18; filter: drop-shadow(0 8px 12px rgba(0,0,0,.2)); transform: rotate(-15deg); }
    .kpi-glow { position: absolute; inset: -30%; background: radial-gradient(550px 250px at 10% 10%, rgba(255,255,255,.3) 0%, transparent 55%); z-index: 1; pointer-events: none; mix-blend-mode: screen; }

    .bg-gradient-profit    { background: linear-gradient(135deg, var(--success-1), var(--success-2)); }
    .bg-gradient-revenue   { background: linear-gradient(135deg, var(--info-1), var(--info-2)); }
    .bg-gradient-customers { background: linear-gradient(135deg, var(--violet-1), var(--violet-2)); }
    .bg-gradient-suppliers { background: linear-gradient(135deg, var(--warn-1), var(--warn-2)); }

    .chart-actions { display: inline-flex; gap: 8px; align-items: center; }
    .chip {
        font-size: .85rem; color: var(--text); border: 1px solid var(--card-border);
        background: transparent;
        padding: 6px 12px; border-radius: 10px; cursor: pointer; user-select: none;
        transition: all .2s ease; font-weight: 600;
    }
    .chip:hover { border-color: var(--ring); background: rgba(127,127,127, .08); }
    .chip.active { background: linear-gradient(135deg, var(--info-1), var(--info-2)); color: white; border-color: transparent; box-shadow: 0 6px 16px -6px rgba(59, 130, 246, .45); }

    .loading-overlay { position: absolute; inset: 0; display: flex; align-items: center; justify-content: center; background: var(--card-bg); backdrop-filter: blur(4px); z-index: 10; border-radius: 0 0 16px 16px; transition: opacity .3s ease; pointer-events: none; }
    .loading-overlay .spinner-border { width: 3rem; height: 3rem; color: var(--info-1); }

    .skeleton-loader { background-color: var(--skeleton); border-radius: 4px; animation: pulse 1.5s infinite ease-in-out; }
    keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: .5; } }

    .sales-table-wrapper { max-height: 400px; overflow-y: auto; }
    .sales-table { width: 100%; color: var(--text); border-collapse: collapse; }
    .sales-table th { background-color: rgba(127,127,127,.05); padding: 12px 15px; text-align: left; font-weight: 600; font-size: 0.85rem; border-bottom: 1px solid var(--card-border); }
    .sales-table td { padding: 12px 15px; border-bottom: 1px solid var(--card-border); font-size: 0.9rem; }
    .sales-table tbody tr:last-child td { border-bottom: none; }
    .sales-table .badge { display: inline-block; padding: 4px 8px; border-radius: 6px; font-weight: 600; color: white; }
    .sales-table .badge-info { background: var(--info-2); }
    .sales-table .btn-view { color: var(--info-1); text-decoration: none; font-weight: 600; }
    .sales-table .btn-view:hover { text-decoration: underline; }

    /* Top Selling Products - Modern Styles */
    .top-products { margin-top: 16px; }
    .top-products .tp-header { display: flex; align-items: center; justify-content: space-between; margin-bottom: 10px; }
    .top-products .tp-title { font-weight: 800; font-size: 0.95rem; letter-spacing: .02em; color: var(--text); }
    .top-products .tp-subtle { color: var(--text-muted); font-size: 0.8rem; }
    .tp-list { list-style: none; padding: 0; margin: 0; display: flex; flex-direction: column; gap: 10px; }
    .tp-item { display: flex; align-items: center; gap: 12px; padding: 10px 12px; border: 1px solid var(--card-border); background: var(--card-bg); border-radius: 12px; box-shadow: var(--shadow); transition: transform .2s ease, box-shadow .2s ease, border-color .2s ease; }
    .tp-item:hover { transform: translateY(-2px); box-shadow: var(--shadow-hover); border-color: var(--ring); }
    .tp-rank { width: 32px; height: 32px; border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; font-weight: 800; font-size: .85rem; color: #fff; flex-shrink: 0; background: linear-gradient(135deg, var(--acc1, var(--info-1)), var(--acc2, var(--info-2))); }
    .tp-avatar { width: 36px; height: 36px; border-radius: 10px; display: inline-flex; align-items: center; justify-content: center; font-weight: 800; color: #fff; flex-shrink: 0; background: linear-gradient(135deg, var(--acc1, var(--violet-1)), var(--acc2, var(--violet-2))); box-shadow: 0 6px 14px -6px rgba(0,0,0,.3); }
    .tp-content { flex: 1; min-width: 0; }
    .tp-name { font-weight: 700; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .tp-bar { margin-top: 6px; width: 100%; height: 8px; border-radius: 6px; background: rgba(127,127,127,.12); position: relative; overflow: hidden; }
    .tp-bar-fill { position: absolute; inset: 0 auto 0 0; height: 100%; border-radius: 6px; background: linear-gradient(135deg, var(--acc1, var(--success-1)), var(--acc2, var(--success-2))); }
    .tp-metric { font-weight: 700; color: var(--text); white-space: nowrap; }
    .tp-chip { padding: 4px 8px; border-radius: 999px; font-size: .75rem; font-weight: 700; color: #fff; background: linear-gradient(135deg, var(--acc1, var(--warn-1)), var(--acc2, var(--warn-2))); }

    keyframes floatIn { from { opacity: 0; transform: translateY(10px) scale(.98); } to { opacity: 1; transform: translateY(0) scale(1); } }
    .stagger > .col, .stagger > [class*="col-"] { animation: floatIn .6s cubic-bezier(0.25, 1, 0.5, 1) both; }
    .stagger > *:nth-child(1) { animation-delay: .0s; }
    .stagger > *:nth-child(2) { animation-delay: .06s; }
    .stagger > *:nth-child(3) { animation-delay: .12s; }
    .stagger > *:nth-child(4) { animation-delay: .18s; }

    /* Make right column card stick for a premium feel */
    .sticky-card { position: sticky; top: 12px; z-index: 2; }
</style>

<div class="container-fluid" data-currency="@currencySymbol">
    <!-- Page Header -->
    <div class="page-header">
        @*<div class="title-wrap">
            <h1>NextGen Dashboard</h1>
            <p class="subtle">A clean, responsive, animated control center for your business.</p>
        </div>*@
        <div class="header-actions">
            <label class="ui-select" for="currencySelect" title="Select display currency">
                <i class="fa-solid fa-money-bill-wave icon" aria-hidden="true"></i>
                <select id="currencySelect" aria-label="Select display currency">
                    <option value="AMD">AMD ֏</option>
                    <option value="SYR">SYR</option>
                    <option value="USD">USD $</option>
                    <option value="EUR">EUR €</option>
                </select>
                <i class="fa-solid fa-chevron-down icon" aria-hidden="true"></i>
            </label>
            <button id="themeToggle" class="theme-toggle" aria-label="Toggle theme">
                <span class="dot" aria-hidden="true"></span>
                <span style="color: var(--text-muted); font-weight: 600;">Theme</span>
            </button>
        </div>
    </div>

    <!-- KPI Cards Row -->
    <div class="row stagger kpi-container">
        <!-- KPI Cards will be dynamically inserted here by JavaScript -->
    </div>

    <!-- Main Charts and Tables Row -->
    <div class="row">
        <!-- Sales Trend Analytics -->
        <div class="col-xl-12 mb-4">
            <div class="card chart-card">
                <div class="card-header">
                    <span><i class="fa-solid fa-chart-line card-title-icon"></i> Sales Trend (Last 30 Days)</span>
                    <div class="chart-actions" id="salesTrendPeriod">
                        <span class="chip active" data-period="daily">Daily</span>
                        <span class="chip" data-period="weekly">Weekly</span>
                        <span class="chip" data-period="monthly">Monthly</span>
                    </div>
                </div>
                <div class="card-body" style="height: 380px; position: relative;">
                    <div class="loading-overlay" id="salesTrendLoader">
                        <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
                    </div>
                    <canvas id="salesTrendChart" role="img" aria-label="Line chart showing sales trend over time"></canvas>
                </div>
            </div>
        </div>

        <!-- Recent Sales -->
        <div class="col-xl-8 mb-4">
            <div class="card">
                <div class="card-header">
                    <span><i class="fa-solid fa-receipt card-title-icon"></i> Sales Transactions</span>
                    <div class="chart-actions">
                        <input type="date" id="startDate" class="chip" aria-label="Start date">
                        <input type="date" id="endDate" class="chip" aria-label="End date">
                        <span id="clearSearch" class="chip" role="button" tabindex="0" title="Clear Dates"><i class="fa-solid fa-xmark"></i></span>
                    </div>
                </div>
                <div class="card-body p-0" id="recentSalesContainer">
                    <!-- Skeleton Loader -->
                    <div class="sales-table-wrapper">
                        <table class="sales-table">
                            <thead><tr><th>Transaction</th><th>Customer</th><th>Items</th><th>Total</th><th>Date</th><th>Action</th></tr></thead>
                            <tbody>
                                @for (int i = 0; i < 5; i++)
                                {
                                    <tr>
                                        <td><div class="skeleton-loader" style="height: 20px; width: 60%;"></div></td>
                                        <td><div class="skeleton-loader" style="height: 20px; width: 80%;"></div></td>
                                        <td><div class="skeleton-loader" style="height: 20px; width: 40%;"></div></td>
                                        <td><div class="skeleton-loader" style="height: 20px; width: 70%;"></div></td>
                                        <td><div class="skeleton-loader" style="height: 20px; width: 90%;"></div></td>
                                        <td><div class="skeleton-loader" style="height: 20px; width: 50%;"></div></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Product Analytics -->
        <div class="col-xl-4 mb-4">
            <!-- Top Selling Products: elevated, sticky card -->
            <div class="card sticky-card">
                <div class="card-header">
                    <span><i class="fa-solid fa-trophy card-title-icon"></i> Top Selling Products</span>
                </div>
                <div class="card-body" style="max-height: 442px; overflow: auto; position: relative;">
                    <div class="loading-overlay" id="productAnalyticsLoader">
                        <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
                    </div>
                    <div id="topSellingProducts" class="mt-1"></div>
                </div>
            </div>

            <!-- Stock Status Donut: compact card below -->
            <div class="card chart-card mt-4">
                <div class="card-header"><span><i class="fa-solid fa-boxes-stacked card-title-icon"></i> Stock Status</span></div>
                <div class="card-body" style="height: 280px; position: relative;">
                    <canvas id="productStatusChart" role="img" aria-label="Donut chart showing product stock status"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
document.addEventListener("DOMContentLoaded", function () {

    const Dashboard = {
        config: {
            currencySymbol: '֏',
            theme: 'light',
            charts: {},
            kpiData: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.KPIs))
        },

        init() {
            this.setupTheme();
            this.setupCurrency();
            this.renderKPIs();
            this.initCharts();
            this.loadData();
            this.attachEventListeners();
        },

        setupTheme() {
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark') {
                this.config.theme = 'dark';
                document.documentElement.setAttribute('data-theme', 'dark');
            }
        },

        setupCurrency() {
            const savedCode = localStorage.getItem('currencyCode') || 'AMD';
            const select = document.getElementById('currencySelect');
            if(select) select.value = savedCode;
            this.updateCurrency(savedCode);
        },

        renderKPIs() {
            const container = document.querySelector('.kpi-container');
            if (!container) return;
            const kpiHtml = this.config.kpiData.map(kpi => `
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card kpi-card ${kpi.GradientClass}">
                        <span class="kpi-glow"></span>
                        <div class="card-body">
                            <div class="card-title">${kpi.Title}</div>
                            <div class="kpi-value"
                                 data-countup
                                 data-format="${kpi.Format}"
                                 data-value="${kpi.Value}">
                                ${this.formatValue(0, kpi.Format, 0)}
                            </div>
                            <div class="kpi-trend"><i class="fa-solid ${kpi.TrendIcon}"></i> ${kpi.TrendText}</div>
                            <i class="fa-solid ${kpi.IconClass} card-icon" aria-hidden="true"></i>
                        </div>
                    </div>
                </div>
            `).join('');
            container.innerHTML = kpiHtml;
            this.animateCountUp();
        },

        initCharts() {
            Chart.defaults.font.family = "Inter, system-ui, sans-serif";
            Chart.defaults.plugins.legend.position = 'bottom';
            Chart.defaults.responsive = true;
            Chart.defaults.maintainAspectRatio = false;

            this.initSalesTrendChart();
            this.initProductStatusChart();
        },

        initSalesTrendChart() {
            const ctx = document.getElementById('salesTrendChart')?.getContext('2d');
            if (!ctx) return;
            this.config.charts.salesTrend = new Chart(ctx, {
                type: 'line',
                data: { labels: [], datasets: [
                    { label: "Sales Revenue", borderColor: this.cssVar('--info-1'), tension: 0.4, fill: true, yAxisID: 'y' },
                    { label: "Transactions", borderColor: this.cssVar('--warn-1'), tension: 0.4, fill: true, yAxisID: 'y1' }
                ]},
                options: this.getCommonChartOptions('y', 'y1')
            });
        },

        initProductStatusChart() {
            const ctx = document.getElementById('productStatusChart')?.getContext('2d');
            if (!ctx) return;
            this.config.charts.productStatus = new Chart(ctx, {
                type: 'doughnut',
                data: { labels: ['In Stock', 'Low Stock', 'Out of Stock'], datasets: [{
                    data: [],
                    backgroundColor: [this.cssVar('--success-1'), this.cssVar('--warn-1'), this.cssVar('--danger-1')],
                    borderWidth: 0
                }]},
                options: { cutout: '70%', plugins: { legend: { position: 'right' } } }
            });
        },

        async loadData() {
            this.loadSalesTrend('daily');
            this.loadRecentSales();
            this.loadProductAnalytics();
        },

        async fetchJSON(url, loaderId) {
            const loader = document.getElementById(loaderId);
            if(loader) loader.style.opacity = '1';
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                return await response.json();
            } catch (error) {
                console.error(`Failed to fetch from ${url}:`, error);
                return null;
            } finally {
                if(loader) setTimeout(() => { loader.style.opacity = '0'; }, 300);
            }
        },

        async loadSalesTrend(period) {
            const data = await this.fetchJSON(`/Admin/GetSalesTrend?period=${period}`, 'salesTrendLoader');
            if (!data || !this.config.charts.salesTrend) return;

            const chart = this.config.charts.salesTrend;
            chart.data.labels = data.labels;
            chart.data.datasets[0].data = data.data.map(d => d.sales);
            chart.data.datasets[1].data = data.data.map(d => d.transactions);
            this.updateChartGradients(chart, [this.cssVar('--info-1'), this.cssVar('--warn-1')]);
            chart.update();
        },

        async loadRecentSales() {
            const start = document.getElementById('startDate').value;
            const end = document.getElementById('endDate').value;
            let url = `/Admin/GetSalesTransactions?startDate=${encodeURIComponent(start)}&endDate=${encodeURIComponent(end)}`;

            const sales = await this.fetchJSON(url);
            const container = document.getElementById('recentSalesContainer');
            if (!sales || !container) {
                container.innerHTML = `<div class="p-4 text-center text-muted">Failed to load sales data.</div>`;
                return;
            };

            if (sales.length === 0) {
                 container.innerHTML = `<div class="p-4 text-center text-muted">No sales found for the selected criteria.</div>`;
                 return;
            }

            const tableHtml = `
                <div class="sales-table-wrapper">
                    <table class="sales-table">
                        <thead><tr><th>Transaction</th><th>Customer</th><th>Items</th><th>Total</th><th>Date</th><th>Action</th></tr></thead>
                        <tbody>
                            ${sales.map(s => `
                                <tr>
                                    <td><strong>#${s.TransactionId}</strong></td>
                                    <td>${this.escapeHtml(s.CustomerName)}</td>
                                    <td><span class="badge badge-info">${s.ItemCount}</span></td>
                                    <td><strong>${this.formatValue(s.TotalAmount, 'currency')}</strong></td>
                                    <td>${this.formatDate(s.Date)}</td>
                                    <td><a href="/Admin/CustomerDetail/${s.CustomerId}" class="btn-view"><i class="fa-solid fa-eye"></i> View</a></td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>`;
            container.innerHTML = tableHtml;
        },

        async loadProductAnalytics() {
            const data = await this.fetchJSON(`/Admin/GetProductAnalytics`, 'productAnalyticsLoader');
            if(!data || !this.config.charts.productStatus) return;

            const totalInStock = data.totalProducts - data.lowStockProducts - data.outOfStockProducts;
            this.config.charts.productStatus.data.datasets[0].data = [totalInStock, data.lowStockProducts, data.outOfStockProducts];
            this.config.charts.productStatus.update();

            const topProductsContainer = document.getElementById('topSellingProducts');
            if(topProductsContainer) {
                const items = Array.isArray(data.topSellingProducts) ? data.topSellingProducts : [];
                const max = Math.max(1, ...items.map(p => p.TotalSold));
                const palette = [
                    ['var(--success-1)','var(--success-2)'],
                    ['var(--info-1)','var(--info-2)'],
                    ['var(--warn-1)','var(--warn-2)'],
                    ['var(--violet-1)','var(--violet-2)'],
                    ['var(--danger-1)','var(--danger-2)']
                ];
                topProductsContainer.innerHTML = `
                    <div class="top-products">
                        <div class="tp-header">
                            <h6 class="tp-title">Top Selling Products</h6>
                            <span class="tp-subtle">${items.length} items</span>
                        </div>
                        <ul class="tp-list" role="list">
                            ${items.map((p, idx) => {
                                const width = Math.round((p.TotalSold / max) * 100);
                                const colors = palette[idx % palette.length];
                                const name = this.escapeHtml(p.ProductName);
                                const initials = name.trim().split(/\s+/).slice(0,2).map(w => w[0] ? w[0].toUpperCase() : '').join('');
                                return `
                                    <li class="tp-item" style="--acc1:${colors[0]}; --acc2:${colors[1]};">
                                        <span class="tp-rank" aria-label="Rank ${idx+1}">${idx+1}</span>
                                        <span class="tp-avatar" aria-hidden="true">${initials}</span>
                                        <div class="tp-content">
                                            <div class="tp-name" title="${name}">${name}</div>
                                            <div class="tp-bar" aria-hidden="true"><div class="tp-bar-fill" style="width:${width}%"></div></div>
                                        </div>
                                        <div class="tp-metric">${p.TotalSold} units</div>
                                    </li>`;
                            }).join('')}
                        </ul>
                    </div>`;
            }
        },

        attachEventListeners() {
            document.getElementById('themeToggle')?.addEventListener('click', () => this.toggleTheme());
            document.getElementById('currencySelect')?.addEventListener('change', (e) => this.updateCurrency(e.target.value, true));
            document.getElementById('salesTrendPeriod')?.addEventListener('click', (e) => {
                if(e.target.classList.contains('chip')){
                    document.querySelectorAll('#salesTrendPeriod .chip').forEach(c => c.classList.remove('active'));
                    e.target.classList.add('active');
                    this.loadSalesTrend(e.target.dataset.period);
                }
            });
            const debouncedSearch = this.debounce(() => this.loadRecentSales(), 500);
            document.getElementById('startDate')?.addEventListener('change', debouncedSearch);
            document.getElementById('endDate')?.addEventListener('change', debouncedSearch);
            document.getElementById('clearSearch')?.addEventListener('click', () => {
                document.getElementById('startDate').value = '';
                document.getElementById('endDate').value = '';
                this.loadRecentSales();
            });
        },

        toggleTheme() {
            this.config.theme = this.config.theme === 'dark' ? 'light' : 'dark';
            document.documentElement.setAttribute('data-theme', this.config.theme === 'dark' ? 'dark' : '');
            localStorage.setItem('theme', this.config.theme);
            setTimeout(() => this.updateAllChartThemes(), 50);
        },

        updateCurrency(code, isManualUpdate = false) {
            this.config.currencySymbol = { AMD: '֏', SYR: 'SYR', USD: '$', EUR: '€' }[code] || '֏';
            document.querySelector('.container-fluid').dataset.currency = this.config.currencySymbol;
            if(isManualUpdate) localStorage.setItem('currencyCode', code);

            document.querySelectorAll('[data-format="currency"]').forEach(el => {
                el.textContent = this.formatValue(el.dataset.value, 'currency');
            });

            Object.values(this.config.charts).forEach(chart => chart.update('none'));
        },

        updateAllChartThemes() {
             Object.values(this.config.charts).forEach(chart => {
                if(!chart) return;
                const options = chart.options;
                options.plugins.legend.labels.color = this.cssVar('--text');
                const scales = options.scales || {};
                Object.keys(scales).forEach(axis => {
                    if (scales[axis].grid) scales[axis].grid.color = this.cssVar('--grid');
                    if (scales[axis].ticks) scales[axis].ticks.color = this.cssVar('--tick');
                });
                if (chart.config.type === 'line' && chart.data.datasets.length) {
                    this.updateChartGradients(chart, chart.data.datasets.map(ds => ds.borderColor));
                }
                if (chart.config.type === 'doughnut' && chart.data.datasets.length) {
                    chart.data.datasets[0].backgroundColor = [this.cssVar('--success-1'), this.cssVar('--warn-1'), this.cssVar('--danger-1')];
                }
                chart.update('none');
            });
        },

        cssVar: name => getComputedStyle(document.documentElement).getPropertyValue(name).trim(),

        // Convert a CSS color (hex or rgb/rgba) to {r,g,b} or null
        parseColorToRgb(color) {
            if (!color) return null;
            const c = color.trim();
            // rgb/rgba format
            const rgb = c.match(/^rgba?\((\d+)\s*,\s*(\d+)\s*,\s*(\d+)(?:\s*,\s*([\d\.]+))?\)$/i);
            if (rgb) {
                return { r: parseInt(rgb[1]), g: parseInt(rgb[2]), b: parseInt(rgb[3]) };
            }
            // hex formats: #RGB, #RRGGBB
            const hex = c.match(/^#([0-9a-f]{3}|[0-9a-f]{6})$/i);
            if (hex) {
                let h = hex[1];
                if (h.length === 3) h = h.split('').map(ch => ch + ch).join('');
                const intVal = parseInt(h, 16);
                return { r: (intVal >> 16) & 255, g: (intVal >> 8) & 255, b: intVal & 255 };
            }
            return null;
        },

        updateChartGradients(chart, colors) {
            const ctx = chart.ctx;
            chart.data.datasets.forEach((dataset, index) => {
                let color = colors[index % colors.length];
                if (!color) color = this.cssVar('--info-1') || '#3b82f6';
                const gradient = ctx.createLinearGradient(0, 0, 0, chart.height);
                const rgbObj = this.parseColorToRgb(color);
                if (rgbObj) {
                    const { r, g, b } = rgbObj;
                    gradient.addColorStop(0, `rgba(${r}, ${g}, ${b}, 0.35)`);
                    gradient.addColorStop(1, `rgba(${r}, ${g}, ${b}, 0.02)`);
                    dataset.backgroundColor = gradient;
                    dataset.borderColor = color;
                } else {
                    // Fallback: just use color without gradient
                    dataset.backgroundColor = color;
                    dataset.borderColor = color;
                }
            });
        },

        animateCountUp() {
            const els = document.querySelectorAll('[data-countup]');
            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if(!entry.isIntersecting) return;
                    const el = entry.target;
                    observer.unobserve(el);

                    const target = Number(el.dataset.value);
                    const format = el.dataset.format || 'int';
                    const duration = 1200;
                    const start = performance.now();
                    const step = (now) => {
                        const t = Math.min(1, (now - start) / duration);
                        const eased = 1 - Math.pow(1 - t, 3); // easeOutCubic
                        const val = (target * eased);
                        el.textContent = this.formatValue(val, format, 0);
                        if (t < 1) requestAnimationFrame(step);
                    };
                    requestAnimationFrame(step);
                });
            }, { threshold: .35 });
            els.forEach(el => observer.observe(el));
        },

        formatValue(val, format, precision = 2) {
            if (val == null || isNaN(val)) return '0';
            if (format === 'currency') {
                return `${this.config.currencySymbol}${Math.round(val).toLocaleString()}`;
            }
            if (format === 'int') return Math.round(val).toLocaleString();
            return parseFloat(val).toFixed(precision);
        },

        formatDate(dateString) {
            if (!dateString) return '';
            let date;
            // Handle ASP.NET JSON Date format /Date(timestamp)/
            const aspNetMatch = dateString.match(/\/Date\((\d+)\)\//);
            if (aspNetMatch) {
                date = new Date(parseInt(aspNetMatch[1]));
            } else {
                date = new Date(dateString);
            }
            if (isNaN(date.getTime())) return '';
            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
        },

        escapeHtml(unsafe) {
            if (!unsafe) return '';
            return unsafe.toString()
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        },

        debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        },

        getCommonChartOptions(primaryYAxis = 'y', secondaryYAxis = 'y1') {
            return {
                responsive: true,
                maintainAspectRatio: false,
                interaction: { mode: 'index', intersect: false },
                plugins: {
                    legend: { labels: { color: this.cssVar('--text'), usePointStyle: true, padding: 20 } },
                    tooltip: {
                        backgroundColor: this.config.theme === 'dark' ? '#1e293b' : '#ffffff',
                        titleColor: this.cssVar('--text'),
                        bodyColor: this.cssVar('--text'),
                        borderColor: this.cssVar('--card-border'),
                        borderWidth: 1,
                        cornerRadius: 8,
                        displayColors: false
                    }
                },
                scales: {
                    x: {
                        grid: { color: this.cssVar('--grid') },
                        ticks: { color: this.cssVar('--tick') }
                    },
                    [primaryYAxis]: {
                        type: 'linear',
                        position: 'left',
                        grid: { color: this.cssVar('--grid') },
                        ticks: { color: this.cssVar('--tick') }
                    },
                    [secondaryYAxis]: {
                        type: 'linear',
                        position: 'right',
                        grid: { display: false },
                        ticks: { color: this.cssVar('--tick') }
                    }
                }
            };
        }
    };

    Dashboard.init();
});
    </script>
}