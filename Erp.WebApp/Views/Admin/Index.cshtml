@using System.Globalization
@{
    ViewBag.Title = "Admin Dashboard";

    // Safe parsing: never throw if ViewBag carries strings/nulls
    Func<object, decimal> SafeToDecimal = (val) =>
    {
        if (val == null) return 0M;
        if (val is decimal d) return d;
        if (val is int i) return i;
        if (val is long l) return l;
        if (val is double db) return (decimal)db;
        if (val is float f) return (decimal)f;
        var s = Convert.ToString(val);
        if (decimal.TryParse(s, NumberStyles.Any, CultureInfo.InvariantCulture, out var parsed)) return parsed;
        if (decimal.TryParse(s, NumberStyles.Any, CultureInfo.CurrentCulture, out parsed)) return parsed;
        return 0M;
    };

    // Safe numeric values for KPIs
    decimal totalProfitVal = SafeToDecimal(ViewBag.TotalProfit);
    decimal totalRevenueVal = SafeToDecimal(ViewBag.TotalRevenue);
    decimal totalCustomersVal = SafeToDecimal(ViewBag.TotalCustomers);
    decimal totalSuppliersVal = SafeToDecimal(ViewBag.TotalSuppliers);

    // Default currency symbol (server-side) — overridden by user's selection client-side
    var currencySymbol = (string)(ViewBag.CurrencySymbol ?? "֏");

    // Fallback display formatting (for when JS is disabled)
    Func<decimal, string> FormatCurrency = v => currencySymbol + " " + v.ToString("#,0", CultureInfo.CurrentUICulture);
    Func<decimal, string> FormatInt = v => v.ToString("#,0", CultureInfo.CurrentUICulture);
}

<!-- Fonts + Icons -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&family=Poppins:wght@600;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" crossorigin="anonymous" referrerpolicy="no-referrer" />

<style>
    :root {
        --bg: #0a0a0f;
        --bg-accent: radial-gradient(1400px 800px at 5% -5%, rgba(124, 58, 237, 0.15) 0%, transparent 70%),
                     radial-gradient(1200px 800px at 95% 5%, rgba(59, 130, 246, 0.12) 0%, transparent 65%),
                     radial-gradient(800px 600px at 50% 50%, rgba(16, 185, 129, 0.08) 0%, transparent 80%);
        --text: #f8fafc;
        --text-muted: #94a3b8;
        --card-bg: rgba(30, 41, 59, 0.8);
        --card-border: rgba(148, 163, 184, 0.1);
        --glass: blur(20px);
        --shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.8);
        --shadow-hover: 0 35px 80px -15px rgba(0, 0, 0, 0.9);
        --grid: rgba(148, 163, 184, 0.12);
        --tick: rgba(226, 232, 240, 0.8);
        --title-grad: linear-gradient(135deg, #8b5cf6, #06b6d4 35%, #10b981 70%, #f59e0b 100%);
        --ring: rgba(139, 92, 246, 0.3);

        --success-1: #10b981; --success-2: #059669;
        --info-1: #06b6d4;   --info-2: #0891b2;
        --violet-1: #8b5cf6; --violet-2: #7c3aed;
        --warn-1: #f59e0b;   --warn-2: #d97706;
        --danger-1: #ef4444; --danger-2: #dc2626;
        
        --neon-glow: 0 0 20px rgba(139, 92, 246, 0.5);
        --glass-border: 1px solid rgba(255, 255, 255, 0.1);
    }
    [data-theme="light"] {
        --bg: #f8fafc;
        --bg-accent: radial-gradient(1400px 800px at 5% -5%, rgba(139, 92, 246, 0.08) 0%, transparent 70%),
                     radial-gradient(1200px 800px at 95% 5%, rgba(59, 130, 246, 0.06) 0%, transparent 65%),
                     radial-gradient(800px 600px at 50% 50%, rgba(16, 185, 129, 0.04) 0%, transparent 80%);
        --text: #0f172a;
        --text-muted: #475569;
        --card-bg: rgba(255, 255, 255, 0.9);
        --card-border: rgba(148, 163, 184, 0.15);
        --glass: blur(20px);
        --shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.15);
        --shadow-hover: 0 35px 80px -15px rgba(0, 0, 0, 0.2);
        --grid: rgba(15, 23, 42, 0.08);
        --tick: rgba(15, 23, 42, 0.6);
        --title-grad: linear-gradient(135deg, #7c3aed, #06b6d4 35%, #059669 70%, #d97706 100%);
        --ring: rgba(124, 58, 237, 0.2);
        
        --neon-glow: 0 0 20px rgba(124, 58, 237, 0.3);
        --glass-border: 1px solid rgba(0, 0, 0, 0.08);
    }

    html, body {
        background: var(--bg);
        color: var(--text);
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        overflow-x: hidden;
    }
    
    body::before {
        content: "";
        position: fixed; inset: 0;
        background: var(--bg-accent);
        pointer-events: none; z-index: 0;
        animation: backgroundShift 20s ease-in-out infinite alternate;
    }
    
    @keyframes backgroundShift {
        0% { transform: scale(1) rotate(0deg); }
        100% { transform: scale(1.1) rotate(1deg); }
    }
    
    .container-fluid { 
        position: relative; 
        z-index: 1;
        padding: 2rem;
    }

    .page-header {
        display: flex; align-items: center; justify-content: space-between;
        gap: 24px; margin-bottom: 3rem;
        flex-wrap: wrap;
        position: relative;
    }
    
    .page-header::after {
        content: '';
        position: absolute;
        bottom: -1rem;
        left: 0;
        right: 0;
        height: 1px;
        background: linear-gradient(90deg, transparent, var(--ring), transparent);
        opacity: 0.6;
    }
    
    .title-wrap h1 {
        margin: 0;
        font-family: 'Poppins', 'Inter', sans-serif;
        font-size: clamp(2.5rem, 4vw, 4rem);
        font-weight: 800; 
        letter-spacing: -0.03em;
        background: var(--title-grad);
        -webkit-background-clip: text; 
        background-clip: text; 
        color: transparent;
        position: relative;
        animation: titleGlow 3s ease-in-out infinite alternate;
    }
    
    @keyframes titleGlow {
        0% { filter: drop-shadow(0 0 20px rgba(139, 92, 246, 0.3)); }
        100% { filter: drop-shadow(0 0 30px rgba(139, 92, 246, 0.6)); }
    }
    
    .subtle { 
        color: var(--text-muted); 
        font-size: 1.1rem; 
        margin-top: 8px;
        font-weight: 400;
        opacity: 0.8;
    }

    .header-actions {
        display: inline-flex; gap: 16px; align-items: center; flex-wrap: wrap;
    }
    
    .theme-toggle, .ui-select {
        display: inline-flex; align-items: center; gap: 12px;
        padding: 14px 20px; 
        border-radius: 16px;
        background: var(--card-bg); 
        border: var(--glass-border);
        backdrop-filter: var(--glass);
        box-shadow: var(--shadow); 
        cursor: pointer; 
        user-select: none;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        color: var(--text);
        font-weight: 600;
        position: relative;
        overflow: hidden;
    }
    
    .theme-toggle::before, .ui-select::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
        transition: left 0.5s;
    }
    
    .theme-toggle:hover::before, .ui-select:hover::before {
        left: 100%;
    }
    
    .theme-toggle:hover, .ui-select:hover { 
        transform: translateY(-2px) scale(1.02); 
        box-shadow: var(--shadow-hover), var(--neon-glow); 
        border-color: var(--ring); 
    }
    
    .theme-toggle .dot {
        width: 24px; height: 24px; border-radius: 50%;
        background: radial-gradient(circle at 30% 30%, #ffd36e 0%, #ffb703 60%, #f59e0b 100%);
        box-shadow: inset 0 0 0 2px rgba(255,255,255,.15), 0 8px 20px rgba(249, 115, 22, .4);
        flex-shrink: 0;
        transition: all 0.3s ease;
    }
    
    [data-theme="light"] .theme-toggle .dot {
        background: radial-gradient(circle at 40% 40%, #90caf9 0%, #60a5fa 60%, #3b82f6 100%);
        box-shadow: inset 0 0 0 2px rgba(255,255,255,.08), 0 8px 20px rgba(59, 130, 246, .4);
    }
    
    .ui-select select {
        appearance: none; 
        -webkit-appearance: none; 
        -moz-appearance: none;
        background: transparent; 
        border: none; 
        color: inherit; 
        font: inherit; 
        outline: none;
        padding-right: 20px; 
        cursor: pointer;
        font-weight: 500;
    }
    
    .ui-select .icon { 
        font-size: 0.9rem; 
        opacity: 0.8;
        transition: opacity 0.2s ease;
    }
    
    .ui-select:hover .icon {
        opacity: 1;
    }

    .card {
        border: var(--glass-border);
        background: var(--card-bg);
        backdrop-filter: var(--glass);
        border-radius: 24px; 
        box-shadow: var(--shadow);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }
    
    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 1px;
        background: linear-gradient(90deg, transparent, var(--ring), transparent);
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .card:hover { 
        transform: translateY(-8px) scale(1.02); 
        box-shadow: var(--shadow-hover), var(--neon-glow); 
        border-color: var(--ring); 
    }
    
    .card:hover::before {
        opacity: 1;
    }
    
    .card .card-header {
        background: transparent;
        font-weight: 700; 
        color: var(--text);
        border-bottom: 1px solid rgba(127,127,127,.08);
        padding: 20px 24px;
        font-size: 1.1rem;
        letter-spacing: -0.01em;
    }
    
    .card .card-body { 
        padding: 24px; 
    }

    .kpi-card { 
        position: relative; 
        overflow: hidden; 
        color: white; 
        border: none; 
        transform-style: preserve-3d;
        perspective: 1000px;
    }
    
    .kpi-card .card-body { 
        position: relative; 
        z-index: 2; 
        transform: translateZ(20px);
    }
    
    .kpi-card .card-title {
        font-weight: 600; 
        font-size: 0.9rem; 
        text-transform: uppercase;
        letter-spacing: .08em; 
        opacity: .9;
        margin-bottom: 8px;
    }
    
    .kpi-card .kpi-value {
        font-size: clamp(2.5rem, 3vw, 3.5rem); 
        font-weight: 900;
        letter-spacing: -0.03em; 
        line-height: 1.1;
        margin-bottom: 12px;
        text-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }
    
    .kpi-trend {
        margin-top: 8px; 
        font-size: 0.95rem; 
        font-weight: 600; 
        opacity: .95;
        display: inline-flex; 
        align-items: center; 
        gap: 8px;
        padding: 8px 16px; 
        border-radius: 20px;
        background: rgba(255,255,255,.15); 
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,.2);
        transition: all 0.3s ease;
    }
    
    .kpi-card:hover .kpi-trend {
        background: rgba(255,255,255,.25);
        transform: scale(1.05);
    }
    
    .kpi-card .card-icon {
        position: absolute; 
        right: -32px; 
        bottom: -32px;
        font-size: 120px; 
        opacity: 0.15;
        filter: drop-shadow(0 12px 20px rgba(0,0,0,.3));
        transform: rotate(-15deg) translateZ(10px);
        transition: all 0.4s ease;
    }
    
    .kpi-card:hover .card-icon {
        transform: rotate(-10deg) translateZ(20px) scale(1.1);
        opacity: 0.25;
    }
    
    .kpi-glow { 
        content: ""; 
        position: absolute; 
        inset: -40%;
        background: radial-gradient(600px 300px at 15% 15%, rgba(255,255,255,.4) 0%, transparent 60%);
        z-index: 1; 
        pointer-events: none; 
        mix-blend-mode: screen;
        animation: glowPulse 4s ease-in-out infinite alternate;
    }
    
    @keyframes glowPulse {
        0% { opacity: 0.3; transform: scale(1); }
        100% { opacity: 0.6; transform: scale(1.1); }
    }

    .bg-gradient-profit    { 
        background: linear-gradient(135deg, var(--success-1), var(--success-2));
        position: relative;
        overflow: hidden;
    }
    .bg-gradient-revenue   { 
        background: linear-gradient(135deg, var(--info-1), var(--info-2));
        position: relative;
        overflow: hidden;
    }
    .bg-gradient-customers { 
        background: linear-gradient(135deg, var(--violet-1), var(--violet-2));
        position: relative;
        overflow: hidden;
    }
    .bg-gradient-suppliers { 
        background: linear-gradient(135deg, var(--warn-1), var(--warn-2));
        position: relative;
        overflow: hidden;
    }
    
    /* Enhanced KPI card effects */
    .kpi-card::after {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
        transform: rotate(45deg);
        transition: all 0.6s ease;
        opacity: 0;
    }
    
    .kpi-card:hover::after {
        opacity: 1;
        transform: rotate(45deg) scale(1.2);
    }

    .chart-card { 
        overflow: hidden; 
        position: relative;
    }
    
    .chart-card::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, transparent 0%, rgba(139, 92, 246, 0.02) 50%, transparent 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
    }
    
    .chart-card:hover::after {
        opacity: 1;
    }
    
    .chart-card .card-header { 
        display: flex; 
        align-items: center; 
        justify-content: space-between; 
        gap: 16px; 
    }
    
    .chart-actions { 
        display: inline-flex; 
        gap: 12px; 
    }
    
    .chip {
        font-size: 0.9rem; 
        color: var(--text);
        border: var(--glass-border);
        background: var(--card-bg);
        backdrop-filter: var(--glass);
        padding: 10px 16px; 
        border-radius: 20px; 
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        font-weight: 500;
        position: relative;
        overflow: hidden;
    }
    
    .chip::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, var(--ring), transparent);
        transition: left 0.4s ease;
        opacity: 0.3;
    }
    
    .chip:hover { 
        border-color: var(--ring); 
        transform: translateY(-2px);
        box-shadow: var(--neon-glow);
    }
    
    .chip:hover::before {
        left: 100%;
    }
    
    .chip.active {
        background: var(--ring);
        color: white;
        border-color: var(--ring);
    }

    /* Modern scrollbars */
    ::-webkit-scrollbar{ 
        width: 12px; 
        height: 12px; 
    }
    ::-webkit-scrollbar-track{ 
        background: rgba(127,127,127,.1); 
        border-radius: 10px; 
    }
    ::-webkit-scrollbar-thumb{ 
        background: linear-gradient(180deg, var(--ring), rgba(139, 92, 246, 0.6)); 
        border-radius: 10px; 
        border: 2px solid transparent; 
        background-clip: padding-box; 
        transition: all 0.3s ease;
    }
    ::-webkit-scrollbar-thumb:hover{ 
        background: linear-gradient(180deg, var(--violet-1), var(--violet-2)); 
        transform: scale(1.1);
    }

    /* Enhanced entrance animations */
    @keyframes floatIn { 
        from { 
            opacity: 0; 
            transform: translateY(20px) scale(.95) rotateX(10deg); 
        } 
        to { 
            opacity: 1; 
            transform: translateY(0) scale(1) rotateX(0deg); 
        } 
    }
    
    @keyframes slideInLeft {
        from {
            opacity: 0;
            transform: translateX(-30px) scale(0.9);
        }
        to {
            opacity: 1;
            transform: translateX(0) scale(1);
        }
    }
    
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(30px) scale(0.9);
        }
        to {
            opacity: 1;
            transform: translateX(0) scale(1);
        }
    }
    
    .stagger > [class*="col-"] { 
        animation: floatIn 0.8s cubic-bezier(0.4, 0, 0.2, 1) both; 
        transform-origin: center bottom;
    }
    .stagger > [class*="col-"]:nth-child(1) { animation-delay: 0.1s; }
    .stagger > [class*="col-"]:nth-child(2) { animation-delay: 0.2s; }
    .stagger > [class*="col-"]:nth-child(3) { animation-delay: 0.3s; }
    .stagger > [class*="col-"]:nth-child(4) { animation-delay: 0.4s; }
    
    /* Hover effects for cards */
    .card:hover {
        animation: cardHover 0.3s ease forwards;
    }
    
    @keyframes cardHover {
        0% { transform: translateY(-8px) scale(1.02); }
        100% { transform: translateY(-12px) scale(1.03); }
    }
    
    /* Floating particles effect */
    .floating-particles {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 0;
        overflow: hidden;
    }
    
    .particle {
        position: absolute;
        width: 4px;
        height: 4px;
        background: var(--ring);
        border-radius: 50%;
        opacity: 0.3;
        animation: float 6s infinite linear;
    }
    
    @keyframes float {
        0% {
            transform: translateY(100vh) translateX(0) rotate(0deg);
            opacity: 0;
        }
        10% {
            opacity: 0.3;
        }
        90% {
            opacity: 0.3;
        }
        100% {
            transform: translateY(-100px) translateX(100px) rotate(360deg);
            opacity: 0;
        }
    }
</style>

<!-- Floating Particles Background -->
<div class="floating-particles" id="particles"></div>

<div class="container-fluid" data-currency="@currencySymbol">
    <!-- Page Header -->
    <div class="page-header">
        <div class="title-wrap">
            <h1>Quantum Dashboard</h1>
            <div class="subtle">Experience the future of business intelligence with cutting-edge design</div>
        </div>

        <div class="header-actions">
            <!-- Currency selector -->
            <label class="ui-select" for="currencySelect" title="Display currency (no conversion)">
                <i class="fa-solid fa-money-bill-wave icon" aria-hidden="true"></i>
                <select id="currencySelect" aria-label="Select display currency">
                    <option value="AMD">AMD ֏</option>
                    <option value="SYR">SYR</option>
                    <option value="USD">USD $</option>
                    <option value="EUR">EUR €</option>
                </select>
                <i class="fa-solid fa-chevron-down icon" aria-hidden="true"></i>
            </label>

            <!-- Theme toggle -->
            <button id="themeToggle" class="theme-toggle" aria-label="Toggle theme">
                <span class="dot" aria-hidden="true"></span>
                <span style="color: var(--text-muted); font-weight: 600;">Theme</span>
            </button>
        </div>
    </div>

    <!-- KPI Cards Row -->
    <div class="row stagger">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card kpi-card bg-gradient-profit">
                <span class="kpi-glow"></span>
                <div class="card-body">
                    <div class="card-title">Total Profit</div>
                    <div class="kpi-value"
                         data-countup
                         data-format="currency"
                         data-decimals="0"
                         data-value="@totalProfitVal.ToString(CultureInfo.InvariantCulture)">
                        @FormatCurrency(totalProfitVal)
                    </div>
                    <div class="kpi-trend"><i class="fa-solid fa-arrow-trend-up"></i> Healthy Growth</div>
                    <i class="fa-solid fa-chart-line card-icon" aria-hidden="true"></i>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card kpi-card bg-gradient-revenue">
                <span class="kpi-glow"></span>
                <div class="card-body">
                    <div class="card-title">Total Revenue</div>
                    <div class="kpi-value"
                         data-countup
                         data-format="currency"
                         data-decimals="0"
                         data-value="@totalRevenueVal.ToString(CultureInfo.InvariantCulture)">
                        @FormatCurrency(totalRevenueVal)
                    </div>
                    <div class="kpi-trend"><i class="fa-solid fa-signal"></i> Steady Momentum</div>
                    <i class="fa-solid fa-coins card-icon" aria-hidden="true"></i>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card kpi-card bg-gradient-customers">
                <span class="kpi-glow"></span>
                <div class="card-body">
                    <div class="card-title">Active Customers</div>
                    <div class="kpi-value"
                         data-countup
                         data-format="int"
                         data-decimals="0"
                         data-value="@totalCustomersVal.ToString(CultureInfo.InvariantCulture)">
                        @FormatInt(totalCustomersVal)
                    </div>
                    <div class="kpi-trend"><i class="fa-solid fa-user-plus"></i> Community Rising</div>
                    <i class="fa-solid fa-users card-icon" aria-hidden="true"></i>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card kpi-card bg-gradient-suppliers">
                <span class="kpi-glow"></span>
                <div class="card-body">
                    <div class="card-title">Valued Suppliers</div>
                    <div class="kpi-value"
                         data-countup
                         data-format="int"
                         data-decimals="0"
                         data-value="@totalSuppliersVal.ToString(CultureInfo.InvariantCulture)">
                        @FormatInt(totalSuppliersVal)
                    </div>
                    <div class="kpi-trend"><i class="fa-solid fa-handshake"></i> Strong Network</div>
                    <i class="fa-solid fa-truck-fast card-icon" aria-hidden="true"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row">
        <div class="col-xl-12 mb-4">
            <div class="card chart-card">
                <div class="card-header">
                    <span>Monthly Performance</span>
                    <div class="chart-actions">
                        <span class="chip active" data-action="ytd">YTD</span>
                        <span class="chip" data-action="mtd">MTD</span>
                        <span class="chip" data-action="all">All</span>
                    </div>
                </div>
                <div class="card-body" style="height: 380px;">
                    <canvas id="profitExpenseChart" role="img" aria-label="Line chart showing monthly profit and expenses"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Secondary Charts -->
    <div class="row">
        <div class="col-xl-8 mb-4">
            <div class="card chart-card">
                <div class="card-header">Top 10 Products by Revenue</div>
                <div class="card-body" style="height: 430px;">
                    <canvas id="topProductsChart" role="img" aria-label="Horizontal bar chart of top ten products by revenue"></canvas>
                </div>
            </div>
        </div>
        <div class="col-xl-4 mb-4">
            <div class="card chart-card">
                <div class="card-header">Busiest Sales Days</div>
                <div class="card-body" style="height: 430px;">
                    <canvas id="salesByDayChart" role="img" aria-label="Radar chart of total sales by weekday"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // --- Currency utilities (symbol only; no conversion of values) ---
        const codeToSymbol = (code) => ({ AMD: '֏', SYR: 'SYR', USD: '$', EUR: '€' }[code] || '֏');
        const symbolToCode = (symbol) => {
            switch(symbol){ case '֏': return 'AMD'; case 'SYR': return 'SYR'; case '$': return 'USD'; case '€': return 'EUR'; default: return 'AMD'; }
        };
        const getContainer = () => document.querySelector('.container-fluid');
        const getCurrencySymbol = () => getContainer()?.dataset.currency || '֏';

        // --- Floating Particles System ---
        (function initParticles() {
            const particlesContainer = document.getElementById('particles');
            const particleCount = 15;
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 6 + 's';
                particle.style.animationDuration = (Math.random() * 3 + 4) + 's';
                particle.style.opacity = Math.random() * 0.5 + 0.1;
                particle.style.transform = `scale(${Math.random() * 0.5 + 0.5})`;
                particlesContainer.appendChild(particle);
            }
        })();

        // --- Theme persistence + toggle ---
        (function initTheme(){
            const saved = localStorage.getItem('theme');
            if(saved) document.documentElement.setAttribute('data-theme', saved);
            const btn = document.getElementById('themeToggle');
            if (btn) btn.addEventListener('click', () => {
                const curr = document.documentElement.getAttribute('data-theme');
                const next = curr === 'light' ? '' : 'light';
                if(next) document.documentElement.setAttribute('data-theme', next);
                else document.documentElement.removeAttribute('data-theme');
                localStorage.setItem('theme', next);
                setTimeout(updateChartTheme, 0);
                
                // Add click animation
                btn.style.transform = 'scale(0.95)';
                setTimeout(() => btn.style.transform = '', 150);
            });
        })();

        // --- Count-up animation (reads clean numeric data-value) ---
        (function initCountUp(){
            const els = document.querySelectorAll('[data-countup]');
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if(!entry.isIntersecting) return;
                    const el = entry.target; observer.unobserve(el);

                    const raw = el.getAttribute('data-value');
                    const target = Number(raw);
                    if(!isFinite(target)) return; // leave fallback as-is

                    const format = (el.getAttribute('data-format') || 'int').toLowerCase();
                    const decimalsAttr = el.getAttribute('data-decimals');
                    const decimals = isFinite(Number(decimalsAttr)) ? Number(decimalsAttr) : (format === 'currency' ? 0 : 0);
                    const nf = new Intl.NumberFormat(undefined, { minimumFractionDigits: 0, maximumFractionDigits: decimals });
                    const fmt = (n) => format === 'currency' ? (getCurrencySymbol() + ' ' + nf.format(n)) : nf.format(n);

                    const duration = 900;
                    const start = performance.now(); const from = 0;
                    const step = (now) => {
                        const t = Math.min(1, (now - start) / duration);
                        const eased = t<.5 ? 4*t*t*t : 1 - Math.pow(-2*t + 2, 3)/2;
                        const val = from + (target - from) * eased;
                        el.textContent = fmt(decimals ? Number(val.toFixed(decimals)) : Math.round(val));
                        if (t < 1) requestAnimationFrame(step);
                        else el.dataset.done = '1';
                    };
                    requestAnimationFrame(step);
                });
            }, { threshold: .35 });
            els.forEach(el => observer.observe(el));
        })();

        // --- Chart.js defaults ---
        Chart.defaults.font.family = "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif";
        Chart.defaults.plugins.legend.labels.boxWidth = 12;
        Chart.defaults.elements.line.borderWidth = 3;
        Chart.defaults.elements.point.radius = 0;
        Chart.defaults.elements.point.hitRadius = 16;
        Chart.defaults.elements.point.hoverRadius = 8;
        Chart.defaults.elements.point.hoverBorderWidth = 3;
        Chart.defaults.elements.point.hoverBackgroundColor = 'rgba(255, 255, 255, 0.8)';
        Chart.defaults.elements.point.hoverBorderColor = 'rgba(139, 92, 246, 1)';

        const CHART_COLORS = {
            blue: 'rgb(54, 162, 235)',
            green: 'rgb(75, 192, 192)',
            purple: 'rgb(153, 102, 255)',
            orange: 'rgb(255, 159, 64)',
            red: 'rgb(255, 99, 132)',
            yellow: 'rgb(255, 205, 86)'
        };

        const cssVar = (name) => getComputedStyle(document.documentElement).getPropertyValue(name).trim() || '';
        const gridColor = () => cssVar('--grid') || 'rgba(0,0,0,.1)';
        const tickColor = () => cssVar('--tick') || '#666';
        const textColor = () => cssVar('--text') || '#222';

        const makeVGradient = (ctx, color, height) => {
            const g = ctx.createLinearGradient(0, 0, 0, height);
            g.addColorStop(0, color.replace('rgb', 'rgba').replace(')', ', 0.35)'));
            g.addColorStop(1, color.replace('rgb', 'rgba').replace(')', ', 0.02)'));
            return g;
        };
        const makeHGradient = (ctx, from, to, width) => {
            const g = ctx.createLinearGradient(0, 0, width, 0);
            g.addColorStop(0, from); g.addColorStop(1, to);
            return g;
        };

        // Declare charts in outer scope for later updates
        let profitExpenseChart, topProductsChart, salesByDayChart;

        // --- Chart 1: Profit vs Expenses ---
        (function initLineChart(){
            const ctxLine = document.getElementById('profitExpenseChart').getContext('2d');
            const gradientProfit = makeVGradient(ctxLine, CHART_COLORS.green, 380);
            const gradientExpense = makeVGradient(ctxLine, CHART_COLORS.red, 380);

            profitExpenseChart = new Chart(ctxLine, {
                type: 'line',
                data: {
                    labels: @Html.Raw(ViewBag.ChartLabels ?? "[]"),
                    datasets: [
                        {
                            label: "Profit",
                            borderColor: CHART_COLORS.green,
                            backgroundColor: gradientProfit,
                            data: @Html.Raw(ViewBag.ProfitData ?? "[]"),
                            fill: true,
                            tension: 0.4,
                            pointHoverRadius: 8,
                            pointHoverBorderWidth: 3,
                            pointHoverBackgroundColor: 'rgba(75, 192, 192, 0.8)',
                            pointHoverBorderColor: '#10b981'
                        },
                        {
                            label: "Expenses",
                            borderColor: CHART_COLORS.red,
                            backgroundColor: gradientExpense,
                            data: @Html.Raw(ViewBag.ExpenseData ?? "[]"),
                            fill: true,
                            tension: 0.4,
                            pointHoverRadius: 8,
                            pointHoverBorderWidth: 3,
                            pointHoverBackgroundColor: 'rgba(255, 99, 132, 0.8)',
                            pointHoverBorderColor: '#ef4444'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: { mode: 'index', intersect: false },
                    plugins: {
                        legend: { 
                            labels: { 
                                color: textColor(), 
                                font: { weight: 600 },
                                padding: 20,
                                usePointStyle: true,
                                pointStyle: 'circle'
                            } 
                        },
                        tooltip: {
                            backgroundColor: 'rgba(15, 23, 42, 0.95)',
                            titleColor: '#fff', 
                            bodyColor: '#e5e7eb',
                            padding: 16, 
                            displayColors: true,
                            cornerRadius: 12,
                            borderColor: 'rgba(139, 92, 246, 0.3)',
                            borderWidth: 1,
                            callbacks: {
                                label: (ctx) => `${ctx.dataset.label}: ${getCurrencySymbol()} ${ctx.parsed.y.toLocaleString()}`
                            }
                        }
                    },
                    scales: {
                        x: { 
                            grid: { 
                                color: gridColor(), 
                                drawBorder: false,
                                lineWidth: 1
                            }, 
                            ticks: { 
                                color: tickColor(),
                                font: { weight: 500 }
                            } 
                        },
                        y: {
                            grid: { 
                                color: gridColor(), 
                                drawBorder: false,
                                lineWidth: 1
                            },
                            ticks: {
                                color: tickColor(),
                                font: { weight: 500 },
                                callback: (v) => {
                                    const n = Number(v);
                                    const sym = getCurrencySymbol();
                                    return sym + ' ' + (Math.abs(n) >= 1000 ? (n/1000).toFixed(1).replace(/\.0$/,'') + 'K' : n);
                                }
                            }
                        }
                    },
                    animation: {
                        duration: 2000,
                        easing: 'easeOutQuart'
                    }
                }
            });
        })();

        // --- Chart 2: Top Products Horizontal Bar ---
        (function initBarChart(){
            const ctxBar = document.getElementById('topProductsChart').getContext('2d');
            const barGradient = makeHGradient(ctxBar, cssVar('--violet-2') || '#a78bfa', cssVar('--info-1') || '#3b82f6', 600);

            topProductsChart = new Chart(ctxBar, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(ViewBag.TopProductsLabels ?? "[]"),
                    datasets: [{
                        label: 'Total Revenue',
                        data: @Html.Raw(ViewBag.TopProductsData ?? "[]"),
                        backgroundColor: barGradient,
                        borderRadius: 8,
                        borderSkipped: false
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(15, 23, 42, 0.9)',
                            titleColor: '#fff', bodyColor: '#e5e7eb',
                            callbacks: { label: (ctx) => `${getCurrencySymbol()} ${ctx.parsed.x.toLocaleString()}` }
                        }
                    },
                    scales: {
                        x: {
                            grid: { color: gridColor(), drawBorder: false },
                            ticks: {
                                color: tickColor(),
                                callback: function(value) {
                                    const v = Number(value);
                                    const sym = getCurrencySymbol();
                                    return sym + ' ' + (Math.abs(v) >= 1000 ? (v/1000).toFixed(1).replace(/\.0$/,'') + 'K' : v);
                                }
                            }
                        },
                        y: { grid: { display: false }, ticks: { color: tickColor(), font: { weight: 600 } } }
                    }
                }
            });
        })();

        // --- Chart 3: Sales by Day Radar ---
        (function initRadarChart(){
            salesByDayChart = new Chart(document.getElementById('salesByDayChart').getContext('2d'), {
                type: 'radar',
                data: {
                    labels: @Html.Raw(ViewBag.SalesByDayLabels ?? "[]"),
                    datasets: [{
                        label: 'Total Sales',
                        data: @Html.Raw(ViewBag.SalesByDayData ?? "[]"),
                        backgroundColor: 'rgba(124, 92, 255, 0.18)',
                        borderColor: cssVar('--violet-1') || CHART_COLORS.purple,
                        borderWidth: 2,
                        pointBackgroundColor: cssVar('--violet-1') || CHART_COLORS.purple,
                        pointHoverRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(15, 23, 42, 0.9)',
                            titleColor: '#fff', bodyColor: '#e5e7eb',
                            callbacks: { label: (ctx) => `${ctx.label}: ${ctx.parsed.r.toLocaleString()}` }
                        }
                    },
                    scales: {
                        r: {
                            grid: { color: gridColor() },
                            angleLines: { color: gridColor() },
                            pointLabels: { color: tickColor(), font: { weight: 600 }},
                            ticks: { color: tickColor(), backdropColor: 'transparent' }
                        }
                    }
                }
            });
        })();

        // --- Re-style charts on theme switch ---
        function updateChartTheme() {
            const legendsColor = textColor();
            const g = gridColor();
            const t = tickColor();
            const apply = (chart) => {
                if(!chart) return;
                if(chart.options.plugins?.legend?.labels) chart.options.plugins.legend.labels.color = legendsColor;
                const scales = chart.options.scales || {};
                Object.keys(scales).forEach(axis => {
                    if(scales[axis].grid)  scales[axis].grid.color = g;
                    if(scales[axis].ticks) scales[axis].ticks.color = t;
                    if(axis === 'r') {
                        if(scales[axis].angleLines) scales[axis].angleLines.color = g;
                        if(scales[axis].pointLabels) scales[axis].pointLabels.color = t;
                    }
                });
                chart.update('none');
            };
            apply(profitExpenseChart);
            apply(topProductsChart);
            apply(salesByDayChart);
        }

        // --- Chart Chip Interactions ---
        (function initChartChips() {
            const chips = document.querySelectorAll('.chip');
            chips.forEach(chip => {
                chip.addEventListener('click', function() {
                    // Remove active class from all chips
                    chips.forEach(c => c.classList.remove('active'));
                    // Add active class to clicked chip
                    this.classList.add('active');
                    
                    // Add click animation
                    this.style.transform = 'scale(0.95)';
                    setTimeout(() => this.style.transform = '', 150);
                    
                    // Here you can add logic to filter chart data based on the selected period
                    const action = this.getAttribute('data-action');
                    console.log('Chart period changed to:', action);
                    // You can implement AJAX calls here to fetch new data
                });
            });
        })();

        // --- Currency selector behavior & persistence ---
        (function initCurrency(){
            const select = document.getElementById('currencySelect');
            const container = getContainer();
            const savedCode = localStorage.getItem('currencyCode');
            const defaultCode = savedCode || symbolToCode(container?.dataset.currency || '֏') || 'AMD';

            const applyCurrency = (code) => {
                const symbol = codeToSymbol(code);
                if(container) container.dataset.currency = symbol; // single source of truth
                localStorage.setItem('currencyCode', code);
                // Update KPI text immediately if animation already done
                document.querySelectorAll('[data-countup]').forEach(el => {
                    el.setAttribute('data-symbol', symbol);
                    if (el.dataset.done === '1') {
                        const raw = Number(el.getAttribute('data-value')) || 0;
                        const format = (el.getAttribute('data-format') || 'int').toLowerCase();
                        const decimals = parseInt(el.getAttribute('data-decimals') || '0', 10);
                        const nf = new Intl.NumberFormat(undefined, { minimumFractionDigits: 0, maximumFractionDigits: decimals });
                        el.textContent = (format === 'currency') ? (symbol + ' ' + nf.format(raw)) : nf.format(raw);
                    }
                });
                // Refresh charts to show the new symbol in ticks/tooltips
                if (profitExpenseChart) profitExpenseChart.update('none');
                if (topProductsChart) topProductsChart.update('none');
                if (salesByDayChart) salesByDayChart.update('none');
            };

            // Initialize selector and apply currency
            if (select) {
                select.value = defaultCode;
                applyCurrency(defaultCode);
                select.addEventListener('change', () => applyCurrency(select.value));
            }
        })();
    </script>
}
