@using System.Globalization
@{
    ViewBag.Title = "Admin Dashboard";

    // Safe parsing: never throw if ViewBag carries strings/nulls
    Func<object, decimal> SafeToDecimal = (val) =>
    {
        if (val == null) return 0M;
        if (val is decimal d) return d;
        if (val is int i) return i;
        if (val is long l) return l;
        if (val is double db) return (decimal)db;
        if (val is float f) return (decimal)f;
        var s = Convert.ToString(val);
        if (decimal.TryParse(s, NumberStyles.Any, CultureInfo.InvariantCulture, out var parsed)) return parsed;
        if (decimal.TryParse(s, NumberStyles.Any, CultureInfo.CurrentCulture, out parsed)) return parsed;
        return 0M;
    };

    // Safe numeric values for KPIs
    decimal totalProfitVal = SafeToDecimal(ViewBag.TotalProfit);
    decimal totalRevenueVal = SafeToDecimal(ViewBag.TotalRevenue);
    decimal totalCustomersVal = SafeToDecimal(ViewBag.TotalCustomers);
    decimal totalSuppliersVal = SafeToDecimal(ViewBag.TotalSuppliers);

    // Default currency symbol (server-side) — overridden by user's selection client-side
    var currencySymbol = (string)(ViewBag.CurrencySymbol ?? "֏");

    // Fallback display formatting (for when JS is disabled)
    Func<decimal, string> FormatCurrency = v => currencySymbol + " " + v.ToString("#,0", CultureInfo.CurrentUICulture);
    Func<decimal, string> FormatInt = v => v.ToString("#,0", CultureInfo.CurrentUICulture);
}

<!-- Fonts + Icons -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&family=Poppins:wght@600;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" crossorigin="anonymous" referrerpolicy="no-referrer" />

<style>
    :root {
        --bg: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --bg-accent: radial-gradient(1400px 800px at 5% -5%, rgba(255,255,255,0.15) 0%, transparent 70%),
                     radial-gradient(1200px 800px at 95% 5%, rgba(255,255,255,0.1) 0%, transparent 65%),
                     radial-gradient(800px 600px at 50% 50%, rgba(255,255,255,0.05) 0%, transparent 80%);
        --text: #ffffff;
        --text-muted: rgba(255,255,255,0.7);
        --card-bg: rgba(255,255,255,0.1);
        --card-border: rgba(255,255,255,0.2);
        --glass: blur(20px);
        --shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        --shadow-hover: 0 35px 70px -15px rgba(0, 0, 0, 0.35);
        --grid: rgba(255,255,255,0.1);
        --tick: rgba(255,255,255,0.8);
        --title-grad: linear-gradient(135deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, #ffeaa7);
        --ring: rgba(255,255,255,0.3);

        --success-1: #00d4aa; --success-2: #00b894;
        --info-1: #74b9ff;   --info-2: #0984e3;
        --violet-1: #a29bfe; --violet-2: #6c5ce7;
        --warn-1: #fdcb6e;   --warn-2: #e17055;
        --danger-1: #fd79a8; --danger-2: #e84393;
        
        --neon-glow: 0 0 20px rgba(255,255,255,0.3);
        --glass-border: 1px solid rgba(255,255,255,0.2);
        --glass-shadow: inset 0 1px 0 rgba(255,255,255,0.1);
    }
    [data-theme="dark"] {
        --bg: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
        --bg-accent: radial-gradient(1400px 800px at 5% -5%, rgba(124,92,255,0.15) 0%, transparent 70%),
                     radial-gradient(1200px 800px at 95% 5%, rgba(0,225,255,0.1) 0%, transparent 65%),
                     radial-gradient(800px 600px at 50% 50%, rgba(255,255,255,0.02) 0%, transparent 80%);
        --text: #ffffff;
        --text-muted: rgba(255,255,255,0.6);
        --card-bg: rgba(255,255,255,0.05);
        --card-border: rgba(255,255,255,0.1);
        --glass: blur(20px);
        --shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.4);
        --shadow-hover: 0 35px 70px -15px rgba(0, 0, 0, 0.5);
        --grid: rgba(255,255,255,0.08);
        --tick: rgba(255,255,255,0.7);
        --title-grad: linear-gradient(135deg, #667eea, #764ba2, #f093fb, #f5576c);
        --ring: rgba(255,255,255,0.2);
        
        --neon-glow: 0 0 20px rgba(124,92,255,0.3);
        --glass-border: 1px solid rgba(255,255,255,0.1);
        --glass-shadow: inset 0 1px 0 rgba(255,255,255,0.05);
    }

    html, body {
        background: var(--bg);
        color: var(--text);
        font-family: 'Inter', 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        overflow-x: hidden;
        min-height: 100vh;
    }
    
    body::before {
        content: "";
        position: fixed; inset: 0;
        background: var(--bg-accent);
        pointer-events: none; z-index: 0;
        animation: backgroundShift 20s ease-in-out infinite alternate;
    }
    
    @keyframes backgroundShift {
        0% { transform: scale(1) rotate(0deg); }
        100% { transform: scale(1.05) rotate(1deg); }
    }
    
    .container-fluid { 
        position: relative; 
        z-index: 1; 
        padding: 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .page-header {
        display: flex; align-items: center; justify-content: space-between;
        gap: 24px; margin-bottom: 3rem;
        flex-wrap: wrap;
        padding: 2rem;
        background: var(--card-bg);
        backdrop-filter: var(--glass);
        border: var(--glass-border);
        border-radius: 24px;
        box-shadow: var(--shadow);
        position: relative;
        overflow: hidden;
    }
    
    .page-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 1px;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    }
    
    .title-wrap h1 {
        margin: 0;
        font-family: 'Poppins', 'SF Pro Display', sans-serif;
        font-size: clamp(32px, 3.5vw, 48px);
        font-weight: 800; 
        letter-spacing: -0.03em;
        background: var(--title-grad);
        background-size: 200% 200%;
        -webkit-background-clip: text; 
        background-clip: text; 
        color: transparent;
        animation: gradientShift 3s ease-in-out infinite;
        text-shadow: 0 0 30px rgba(255,255,255,0.1);
    }
    
    @keyframes gradientShift {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }
    
    .subtle { 
        color: var(--text-muted); 
        font-size: 1.1rem; 
        margin-top: 8px;
        font-weight: 400;
        opacity: 0.9;
    }

    .header-actions {
        display: inline-flex; gap: 16px; align-items: center; flex-wrap: wrap;
    }
    
    .theme-toggle, .ui-select {
        display: inline-flex; align-items: center; gap: 12px;
        padding: 14px 20px; 
        border-radius: 16px;
        background: var(--card-bg); 
        border: var(--glass-border);
        backdrop-filter: var(--glass);
        box-shadow: var(--shadow), var(--glass-shadow); 
        cursor: pointer; 
        user-select: none;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        color: var(--text);
        font-weight: 600;
        font-size: 0.95rem;
        position: relative;
        overflow: hidden;
    }
    
    .theme-toggle::before, .ui-select::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
        transition: left 0.5s ease;
    }
    
    .theme-toggle:hover::before, .ui-select:hover::before {
        left: 100%;
    }
    
    .theme-toggle:hover, .ui-select:hover { 
        transform: translateY(-2px) scale(1.02); 
        box-shadow: var(--shadow-hover), var(--neon-glow); 
        border-color: var(--ring); 
    }
    .theme-toggle .dot {
        width: 24px; height: 24px; border-radius: 50%;
        background: radial-gradient(circle at 30% 30%, #ffd36e 0%, #ffb703 60%, #f59e0b 100%);
        box-shadow: inset 0 0 0 2px rgba(255,255,255,.2), 0 8px 20px rgba(249, 115, 22, .4);
        flex-shrink: 0;
        transition: all 0.3s ease;
        position: relative;
    }
    
    .theme-toggle .dot::after {
        content: '';
        position: absolute;
        inset: -2px;
        border-radius: 50%;
        background: linear-gradient(45deg, #ffd36e, #ffb703, #f59e0b);
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: -1;
    }
    
    .theme-toggle:hover .dot::after {
        opacity: 0.3;
    }
    
    [data-theme="dark"] .theme-toggle .dot {
        background: radial-gradient(circle at 40% 40%, #90caf9 0%, #60a5fa 60%, #3b82f6 100%);
        box-shadow: inset 0 0 0 2px rgba(255,255,255,.15), 0 8px 20px rgba(59, 130, 246, .4);
    }
    
    [data-theme="dark"] .theme-toggle .dot::after {
        background: linear-gradient(45deg, #90caf9, #60a5fa, #3b82f6);
    }
    .ui-select select {
        appearance: none; -webkit-appearance: none; -moz-appearance: none;
        background: transparent; border: none; color: inherit; font: inherit; outline: none;
        padding-right: 20px; cursor: pointer;
        font-weight: 600;
    }
    
    .ui-select .icon { 
        font-size: 1rem; 
        opacity: 0.8;
        transition: opacity 0.3s ease;
    }
    
    .ui-select:hover .icon {
        opacity: 1;
    }

    .card {
        border: var(--glass-border);
        background: var(--card-bg);
        backdrop-filter: var(--glass);
        border-radius: 20px; 
        box-shadow: var(--shadow), var(--glass-shadow);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }
    
    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 1px;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .card:hover { 
        transform: translateY(-8px) scale(1.02); 
        box-shadow: var(--shadow-hover), var(--neon-glow); 
        border-color: var(--ring); 
    }
    
    .card:hover::before {
        opacity: 1;
    }
    .card .card-header {
        background: transparent;
        font-weight: 700; color: var(--text);
        border-bottom: 1px solid rgba(255,255,255,0.1);
        padding: 20px 24px;
        font-size: 1.1rem;
        letter-spacing: -0.01em;
    }
    
    .card .card-body { 
        padding: 24px; 
    }

    .kpi-card { 
        position: relative; 
        overflow: hidden; 
        color: white; 
        border: none; 
        background: linear-gradient(135deg, var(--success-1), var(--success-2));
        box-shadow: var(--shadow), 0 0 30px rgba(0,0,0,0.1);
    }
    
    .kpi-card .card-body { 
        position: relative; 
        z-index: 2; 
        padding: 28px;
    }
    
    .kpi-card .card-title {
        font-weight: 600; 
        font-size: 0.9rem; 
        text-transform: uppercase;
        letter-spacing: .08em; 
        opacity: .9;
        margin-bottom: 8px;
    }
    
    .kpi-card .kpi-value {
        font-size: clamp(32px, 3.2vw, 42px); 
        font-weight: 800;
        letter-spacing: -0.03em; 
        line-height: 1.1;
        margin-bottom: 12px;
        text-shadow: 0 2px 10px rgba(0,0,0,0.2);
    }
    .kpi-trend {
        font-size: 0.95rem; 
        font-weight: 600; 
        opacity: .9;
        display: inline-flex; 
        align-items: center; 
        gap: 8px;
        padding: 8px 14px; 
        border-radius: 12px;
        background: rgba(255,255,255,.15); 
        backdrop-filter: blur(8px);
        border: 1px solid rgba(255,255,255,0.1);
        transition: all 0.3s ease;
    }
    
    .kpi-trend:hover {
        background: rgba(255,255,255,.2);
        transform: translateY(-1px);
    }
    
    .kpi-card .card-icon {
        position: absolute; 
        right: -32px; 
        bottom: -32px;
        font-size: 120px; 
        opacity: 0.15;
        filter: drop-shadow(0 10px 15px rgba(0,0,0,.3));
        transform: rotate(-15deg);
        transition: all 0.3s ease;
    }
    
    .kpi-card:hover .card-icon {
        transform: rotate(-10deg) scale(1.05);
        opacity: 0.2;
    }
    
    .kpi-glow { 
        content: ""; 
        position: absolute; 
        inset: -40%;
        background: radial-gradient(600px 300px at 15% 15%, rgba(255,255,255,.4) 0%, transparent 60%);
        z-index: 1; 
        pointer-events: none; 
        mix-blend-mode: screen;
        animation: glowPulse 3s ease-in-out infinite alternate;
    }
    
    @keyframes glowPulse {
        0% { opacity: 0.3; transform: scale(1); }
        100% { opacity: 0.6; transform: scale(1.05); }
    }

    .bg-gradient-profit    { 
        background: linear-gradient(135deg, var(--success-1), var(--success-2));
        box-shadow: 0 0 30px rgba(0, 212, 170, 0.3);
    }
    .bg-gradient-revenue   { 
        background: linear-gradient(135deg, var(--info-1), var(--info-2));
        box-shadow: 0 0 30px rgba(116, 185, 255, 0.3);
    }
    .bg-gradient-customers { 
        background: linear-gradient(135deg, var(--violet-1), var(--violet-2));
        box-shadow: 0 0 30px rgba(162, 155, 254, 0.3);
    }
    .bg-gradient-suppliers { 
        background: linear-gradient(135deg, var(--warn-1), var(--warn-2));
        box-shadow: 0 0 30px rgba(253, 203, 110, 0.3);
    }

    .chart-card { 
        overflow: hidden; 
        background: var(--card-bg);
        backdrop-filter: var(--glass);
    }
    
    .chart-card .card-header { 
        display: flex; 
        align-items: center; 
        justify-content: space-between; 
        gap: 16px; 
    }
    
    .chart-actions { 
        display: inline-flex; 
        gap: 10px; 
    }
    
    .chip {
        font-size: 0.9rem; 
        color: var(--text);
        border: var(--glass-border);
        background: var(--card-bg);
        backdrop-filter: var(--glass);
        padding: 8px 14px; 
        border-radius: 12px; 
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        font-weight: 500;
        position: relative;
        overflow: hidden;
    }
    
    .chip::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
        transition: left 0.5s ease;
    }
    
    .chip:hover::before {
        left: 100%;
    }
    
    .chip:hover { 
        border-color: var(--ring); 
        transform: translateY(-1px);
        box-shadow: var(--shadow);
    }
    
    .chip.active { 
        background: linear-gradient(135deg, var(--info-1), var(--info-2)); 
        color: white; 
        border-color: transparent; 
        box-shadow: 0 8px 20px -8px rgba(116, 185, 255, 0.5);
        transform: translateY(-1px);
    }

    /* Chart loader helper */
    .chart-loader { display: none; }

    /* Enhanced scrollbars */
    ::-webkit-scrollbar{ 
        width: 12px; 
        height: 12px; 
    }
    ::-webkit-scrollbar-track{ 
        background: rgba(255,255,255,0.1); 
        border-radius: 10px; 
    }
    ::-webkit-scrollbar-thumb{ 
        background: linear-gradient(180deg, rgba(255,255,255,0.3), rgba(255,255,255,0.2)); 
        border-radius: 10px; 
        border: 2px solid transparent; 
        background-clip: padding-box; 
        transition: background 0.3s ease;
    }
    ::-webkit-scrollbar-thumb:hover{ 
        background: linear-gradient(180deg, rgba(255,255,255,0.5), rgba(255,255,255,0.4)); 
        border: 2px solid transparent; 
    }

    /* Enhanced entrance animations */
    @keyframes floatIn { 
        from { 
            opacity: 0; 
            transform: translateY(20px) scale(0.95); 
        } 
        to { 
            opacity: 1; 
            transform: translateY(0) scale(1); 
        } 
    }
    
    @keyframes slideInLeft {
        from {
            opacity: 0;
            transform: translateX(-30px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(30px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .stagger > [class*="col-"] { 
        animation: floatIn 0.8s cubic-bezier(0.4, 0, 0.2, 1) both; 
    }
    .stagger > [class*="col-"]:nth-child(1) { animation-delay: 0.1s; }
    .stagger > [class*="col-"]:nth-child(2) { animation-delay: 0.2s; }
    .stagger > [class*="col-"]:nth-child(3) { animation-delay: 0.3s; }
    .stagger > [class*="col-"]:nth-child(4) { animation-delay: 0.4s; }
    
    .page-header {
        animation: slideInLeft 1s cubic-bezier(0.4, 0, 0.2, 1) both;
    }
    
    .chart-card {
        animation: slideInRight 1s cubic-bezier(0.4, 0, 0.2, 1) both;
        animation-delay: 0.5s;
    }
</style>

<div class="container-fluid" data-currency="@currencySymbol">
    <!-- Page Header -->
    <div class="page-header">
        <div class="title-wrap">
            <h1>🚀 NextGen Dashboard</h1>
            <div class="subtle">✨ A futuristic, responsive control center powered by AI insights</div>
        </div>

        <div class="header-actions">
            <!-- Currency selector -->
            <label class="ui-select" for="currencySelect" title="Display currency (no conversion)">
                <i class="fa-solid fa-money-bill-wave icon" aria-hidden="true"></i>
                <select id="currencySelect" aria-label="Select display currency">
                    <option value="AMD">AMD ֏</option>
                    <option value="SYR">SYR</option>
                    <option value="USD">USD $</option>
                    <option value="EUR">EUR €</option>
                </select>
                <i class="fa-solid fa-chevron-down icon" aria-hidden="true"></i>
            </label>

            <!-- Theme toggle -->
            <button id="themeToggle" class="theme-toggle" aria-label="Toggle theme">
                <span class="dot" aria-hidden="true"></span>
                <span style="color: var(--text-muted); font-weight: 600;">Theme</span>
            </button>
        </div>
    </div>

    <!-- KPI Cards Row -->
    <div class="row stagger">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card kpi-card bg-gradient-profit">
                <span class="kpi-glow"></span>
                <div class="card-body">
                    <div class="card-title">💰 Total Profit</div>
                    <div class="kpi-value"
                         data-countup
                         data-format="currency"
                         data-decimals="0"
                         data-value="@totalProfitVal.ToString(CultureInfo.InvariantCulture)">
                        @FormatCurrency(totalProfitVal)
                    </div>
                    <div class="kpi-trend"><i class="fa-solid fa-arrow-trend-up"></i> 📈 Healthy Growth</div>
                    <i class="fa-solid fa-chart-line card-icon" aria-hidden="true"></i>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card kpi-card bg-gradient-revenue">
                <span class="kpi-glow"></span>
                <div class="card-body">
                    <div class="card-title">💎 Total Revenue</div>
                    <div class="kpi-value"
                         data-countup
                         data-format="currency"
                         data-decimals="0"
                         data-value="@totalRevenueVal.ToString(CultureInfo.InvariantCulture)">
                        @FormatCurrency(totalRevenueVal)
                    </div>
                    <div class="kpi-trend"><i class="fa-solid fa-signal"></i> 🚀 Steady Momentum</div>
                    <i class="fa-solid fa-coins card-icon" aria-hidden="true"></i>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card kpi-card bg-gradient-customers">
                <span class="kpi-glow"></span>
                <div class="card-body">
                    <div class="card-title">👥 Active Customers</div>
                    <div class="kpi-value"
                         data-countup
                         data-format="int"
                         data-decimals="0"
                         data-value="@totalCustomersVal.ToString(CultureInfo.InvariantCulture)">
                        @FormatInt(totalCustomersVal)
                    </div>
                    <div class="kpi-trend"><i class="fa-solid fa-user-plus"></i> 🌟 Community Rising</div>
                    <i class="fa-solid fa-users card-icon" aria-hidden="true"></i>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card kpi-card bg-gradient-suppliers">
                <span class="kpi-glow"></span>
                <div class="card-body">
                    <div class="card-title">🤝 Valued Suppliers</div>
                    <div class="kpi-value"
                         data-countup
                         data-format="int"
                         data-decimals="0"
                         data-value="@totalSuppliersVal.ToString(CultureInfo.InvariantCulture)">
                        @FormatInt(totalSuppliersVal)
                    </div>
                    <div class="kpi-trend"><i class="fa-solid fa-handshake"></i> 🔗 Strong Network</div>
                    <i class="fa-solid fa-truck-fast card-icon" aria-hidden="true"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Sales and Product Info Row -->
    <div class="row">
        <div class="col-xl-8 mb-4">
            <div class="card">
                <div class="card-header">
                    <span>📊 Recent Sales Transactions</span>
                    <div class="chart-actions">
                        <input type="date" id="startDate" class="chip" style="color: var(--text); background: transparent; border: none; padding: 8px 14px; border-radius: 12px;" aria-label="Start date">
                        <input type="date" id="endDate" class="chip" style="color: var(--text); background: transparent; border: none; padding: 8px 14px; border-radius: 12px;" aria-label="End date">
                        <span class="chip" id="searchSales" role="button" tabindex="0">🔍 Search</span>
                        <span class="chip" id="clearSearch" role="button" tabindex="0">🔄 Clear</span>
                    </div>
                </div>
                <div class="card-body" style="max-height: 400px; overflow-y: auto;">
                    <div id="recentSalesTable">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row">
        <div class="col-xl-12 mb-4">
            <div class="card chart-card">
                <div class="card-header">
                    <span>📈 Monthly Performance Analytics</span>
                    <div class="chart-actions">
                        <span class="chip" data-action="ytd">📅 YTD</span>
                        <span class="chip" data-action="mtd">📊 MTD</span>
                        <span class="chip" data-action="all">📋 All</span>
                    </div>
                </div>
                <div class="card-body" style="height: 380px;">
                    <canvas id="profitExpenseChart" role="img" aria-label="Line chart showing monthly profit and expenses"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Sales Trend Chart Row -->
    <div class="row">
        <div class="col-xl-12 mb-4">
            <div class="card chart-card">
                <div class="card-header">
                    <span style="display: inline-flex; align-items: center; gap: 10px;">
                        <i class="fa-solid fa-chart-line" style="color: var(--info-1);"></i>
                        🚀 Sales Trend Analytics
                    </span>
                    <div class="chart-actions">
                        <span class="chip active" id="trendDaily" data-period="daily">📅 Daily</span>
                        <span class="chip" id="trendWeekly" data-period="weekly">📊 Weekly</span>
                        <span class="chip" id="trendMonthly" data-period="monthly">📈 Monthly</span>
                    </div>
                </div>
                <div class="card-body" style="height: 380px; position: relative;">
                    <!-- Loading Overlay -->
                    <div id="salesTrendLoader" class="chart-loader" style="position: absolute; inset: 0; display: flex; align-items: center; justify-content: center; background: rgba(255,255,255,0.8); backdrop-filter: blur(4px); z-index: 10; border-radius: 12px;">
                        <div style="text-align: center;">
                            <div class="spinner-border text-primary mb-2" role="status">
                                <span class="sr-only">Loading chart data...</span>
                            </div>
                            <div style="color: var(--text-muted); font-size: 0.9rem;">Loading sales trend data...</div>
                        </div>
                    </div>
                    <canvas id="salesTrendChart" role="img" aria-label="Line chart showing sales trend over time"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Secondary Charts -->
    <div class="row">
        <div class="col-xl-12 mb-4">
            <div class="card chart-card">
                <div class="card-header">🎯 Busiest Sales Days Analysis</div>
                <div class="card-body" style="height: 430px;">
                    <canvas id="salesByDayChart" role="img" aria-label="Radar chart of total sales by weekday"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // --- Currency utilities (symbol only; no conversion of values) ---
        const codeToSymbol = (code) => ({ AMD: '֏', SYR: 'SYR', USD: '$', EUR: '€' }[code] || '֏');
        const symbolToCode = (symbol) => {
            switch(symbol){ case '֏': return 'AMD'; case 'SYR': return 'SYR'; case '$': return 'USD'; case '€': return 'EUR'; default: return 'AMD'; }
        };
        const getContainer = () => document.querySelector('.container-fluid');
        const getCurrencySymbol = () => getContainer()?.dataset.currency || '֏';

        // --- Theme persistence + toggle ---
        (function initTheme(){
            const saved = localStorage.getItem('theme');
            if(saved) document.documentElement.setAttribute('data-theme', saved);
            const btn = document.getElementById('themeToggle');
            if (btn) btn.addEventListener('click', () => {
                const curr = document.documentElement.getAttribute('data-theme');
                const next = curr === 'dark' ? '' : 'dark';
                if(next) document.documentElement.setAttribute('data-theme', next);
                else document.documentElement.removeAttribute('data-theme');
                localStorage.setItem('theme', next);
                setTimeout(updateChartTheme, 0);
            });
        })();

        // --- Enhanced Count-up animation with modern easing ---
        (function initCountUp(){
            const els = document.querySelectorAll('[data-countup]');
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if(!entry.isIntersecting) return;
                    const el = entry.target; observer.unobserve(el);

                    const raw = el.getAttribute('data-value');
                    const target = Number(raw);
                    if(!isFinite(target)) return; // leave fallback as-is

                    const format = (el.getAttribute('data-format') || 'int').toLowerCase();
                    const decimalsAttr = el.getAttribute('data-decimals');
                    const decimals = isFinite(Number(decimalsAttr)) ? Number(decimalsAttr) : (format === 'currency' ? 0 : 0);
                    const nf = new Intl.NumberFormat(undefined, { minimumFractionDigits: 0, maximumFractionDigits: decimals });
                    const fmt = (n) => format === 'currency' ? (getCurrencySymbol() + ' ' + nf.format(n)) : nf.format(n);

                    // Enhanced duration and easing
                    const duration = 1200;
                    const start = performance.now(); 
                    const from = 0;
                    
                    // Modern cubic-bezier easing
                    const easeOutCubic = (t) => 1 - Math.pow(1 - t, 3);
                    const easeOutBack = (t) => {
                        const c1 = 1.70158;
                        const c3 = c1 + 1;
                        return 1 + c3 * Math.pow(t - 1, 3) + c1 * Math.pow(t - 1, 2);
                    };
                    
                    const step = (now) => {
                        const t = Math.min(1, (now - start) / duration);
                        const eased = easeOutBack(t);
                        const val = from + (target - from) * eased;
                        
                        // Add subtle glow effect during animation
                        if (t < 0.8) {
                            el.style.textShadow = `0 0 20px rgba(255,255,255,${0.3 * (1-t)})`;
                        } else {
                            el.style.textShadow = '0 2px 10px rgba(0,0,0,0.2)';
                        }
                        
                        el.textContent = fmt(decimals ? Number(val.toFixed(decimals)) : Math.round(val));
                        if (t < 1) requestAnimationFrame(step);
                        else {
                            el.dataset.done = '1';
                            // Final celebration effect
                            el.style.transform = 'scale(1.05)';
                            setTimeout(() => {
                                el.style.transform = 'scale(1)';
                                el.style.transition = 'transform 0.3s ease';
                            }, 100);
                        }
                    };
                    requestAnimationFrame(step);
                });
            }, { threshold: .25 });
            els.forEach(el => observer.observe(el));
        })();

        // --- Enhanced Chart.js defaults ---
        Chart.defaults.font.family = "'Inter', 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif";
        Chart.defaults.plugins.legend.labels.boxWidth = 12;
        Chart.defaults.elements.line.borderWidth = 4;
        Chart.defaults.elements.point.radius = 0;
        Chart.defaults.elements.point.hitRadius = 15;
        Chart.defaults.elements.line.tension = 0.4;
        Chart.defaults.plugins.tooltip.cornerRadius = 12;
        Chart.defaults.plugins.tooltip.padding = 16;

        const CHART_COLORS = {
            blue: 'rgb(116, 185, 255)',
            green: 'rgb(0, 212, 170)',
            purple: 'rgb(162, 155, 254)',
            orange: 'rgb(253, 203, 110)',
            red: 'rgb(253, 121, 168)',
            yellow: 'rgb(255, 205, 86)',
            cyan: 'rgb(0, 225, 255)',
            pink: 'rgb(255, 107, 193)'
        };

        const cssVar = (name) => getComputedStyle(document.documentElement).getPropertyValue(name).trim() || '';
        const gridColor = () => cssVar('--grid') || 'rgba(0,0,0,.1)';
        const tickColor = () => cssVar('--tick') || '#666';
        const textColor = () => cssVar('--text') || '#222';

        const makeVGradient = (ctx, color, height) => {
            const g = ctx.createLinearGradient(0, 0, 0, height);
            g.addColorStop(0, color.replace('rgb', 'rgba').replace(')', ', 0.35)'));
            g.addColorStop(1, color.replace('rgb', 'rgba').replace(')', ', 0.02)'));
            return g;
        };
        const makeHGradient = (ctx, from, to, width) => {
            const g = ctx.createLinearGradient(0, 0, width, 0);
            g.addColorStop(0, from); g.addColorStop(1, to);
            return g;
        };

        // Declare charts in outer scope for later updates
        let profitExpenseChart, salesByDayChart, salesTrendChart;

        // --- Chart 1: Profit vs Expenses ---
        (function initLineChart(){
            const ctxLine = document.getElementById('profitExpenseChart').getContext('2d');
            const gradientProfit = makeVGradient(ctxLine, CHART_COLORS.green, 380);
            const gradientExpense = makeVGradient(ctxLine, CHART_COLORS.red, 380);

            profitExpenseChart = new Chart(ctxLine, {
                type: 'line',
                data: {
                    labels: @Html.Raw(ViewBag.ChartLabels ?? "[]"),
                    datasets: [
                        {
                            label: "Profit",
                            borderColor: CHART_COLORS.green,
                            backgroundColor: gradientProfit,
                            data: @Html.Raw(ViewBag.ProfitData ?? "[]"),
                            fill: true,
                            tension: 0.35,
                            pointHoverRadius: 5,
                            pointHoverBorderWidth: 2
                        },
                        {
                            label: "Expenses",
                            borderColor: CHART_COLORS.red,
                            backgroundColor: gradientExpense,
                            data: @Html.Raw(ViewBag.ExpenseData ?? "[]"),
                            fill: true,
                            tension: 0.35,
                            pointHoverRadius: 5,
                            pointHoverBorderWidth: 2
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: { mode: 'index', intersect: false },
                    plugins: {
                        legend: { labels: { color: textColor(), font: { weight: 600 } } },
                        tooltip: {
                            backgroundColor: 'rgba(15, 23, 42, 0.9)',
                            titleColor: '#fff', bodyColor: '#e5e7eb',
                            padding: 12, displayColors: true,
                            callbacks: {
                                label: (ctx) => `${ctx.dataset.label}: ${getCurrencySymbol()} ${ctx.parsed.y.toLocaleString()}`
                            }
                        }
                    },
                    scales: {
                        x: { grid: { color: gridColor(), drawBorder: false }, ticks: { color: tickColor() } },
                        y: {
                            grid: { color: gridColor(), drawBorder: false },
                            ticks: {
                                color: tickColor(),
                                callback: (v) => {
                                    const n = Number(v);
                                    const sym = getCurrencySymbol();
                                    return sym + ' ' + (Math.abs(n) >= 1000 ? (n/1000).toFixed(1).replace(/\.0$/,'') + 'K' : n);
                                }
                            }
                        }
                    }
                }
            });
        })();


        // --- Chart 3: Sales by Day Radar ---
        (function initRadarChart(){
            salesByDayChart = new Chart(document.getElementById('salesByDayChart').getContext('2d'), {
                type: 'radar',
                data: {
                    labels: @Html.Raw(ViewBag.SalesByDayLabels ?? "[]"),
                    datasets: [{
                        label: 'Total Sales',
                        data: @Html.Raw(ViewBag.SalesByDayData ?? "[]"),
                        backgroundColor: 'rgba(124, 92, 255, 0.18)',
                        borderColor: cssVar('--violet-1') || CHART_COLORS.purple,
                        borderWidth: 2,
                        pointBackgroundColor: cssVar('--violet-1') || CHART_COLORS.purple,
                        pointHoverRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(15, 23, 42, 0.9)',
                            titleColor: '#fff', bodyColor: '#e5e7eb',
                            callbacks: { label: (ctx) => `${ctx.label}: ${ctx.parsed.r.toLocaleString()}` }
                        }
                    },
                    scales: {
                        r: {
                            grid: { color: gridColor() },
                            angleLines: { color: gridColor() },
                            pointLabels: { color: tickColor(), font: { weight: 600 }},
                            ticks: { color: tickColor(), backdropColor: 'transparent' }
                        }
                    }
                }
            });
        })();

        // --- Chart 4: Sales Trend Chart ---
        (function initSalesTrendChart(){
            const ctx = document.getElementById('salesTrendChart').getContext('2d');
            const gradientSales = makeVGradient(ctx, CHART_COLORS.blue, 380);
            const gradientTransactions = makeVGradient(ctx, CHART_COLORS.orange, 380);

            salesTrendChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: "Sales Revenue",
                            borderColor: CHART_COLORS.blue,
                            backgroundColor: gradientSales,
                            data: [],
                            fill: true,
                            tension: 0.35,
                            pointHoverRadius: 6,
                            pointHoverBorderWidth: 2,
                            pointRadius: 0,
                            hitRadius: 12,
                            yAxisID: 'y'
                        },
                        {
                            label: "Transaction Count",
                            borderColor: CHART_COLORS.orange,
                            backgroundColor: gradientTransactions,
                            data: [],
                            fill: true,
                            tension: 0.35,
                            pointHoverRadius: 6,
                            pointHoverBorderWidth: 2,
                            pointRadius: 0,
                            hitRadius: 12,
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: { mode: 'index', intersect: false },
                    plugins: {
                        legend: { labels: { color: textColor(), font: { weight: 600 } } },
                        tooltip: {
                            backgroundColor: 'rgba(15, 23, 42, 0.9)',
                            titleColor: '#fff', bodyColor: '#e5e7eb',
                            padding: 12, displayColors: true,
                            callbacks: {
                                label: (ctx) => {
                                    if (ctx.datasetIndex === 0) {
                                        return `${ctx.dataset.label}: ${getCurrencySymbol()} ${ctx.parsed.y.toLocaleString()}`;
                                    } else {
                                        return `${ctx.dataset.label}: ${ctx.parsed.y} transactions`;
                                    }
                                }
                            }
                        }
                    },
                    scales: {
                        x: { grid: { color: gridColor(), drawBorder: false }, ticks: { color: tickColor() } },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            grid: { color: gridColor(), drawBorder: false },
                            ticks: {
                                color: tickColor(),
                                callback: (v) => {
                                    const n = Number(v);
                                    const sym = getCurrencySymbol();
                                    return sym + ' ' + (Math.abs(n) >= 1000 ? (n/1000).toFixed(1).replace(/\.0$/,'') + 'K' : n);
                                }
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            grid: { drawOnChartArea: false },
                            ticks: {
                                color: tickColor(),
                                callback: (v) => Number(v).toLocaleString()
                            }
                        }
                    }
                }
            });
        })();

        // Load sales trend data
        function loadSalesTrend(period = 'daily') {
            const startDate = document.getElementById('startDate')?.value;
            const endDate = document.getElementById('endDate')?.value;
            const loader = document.getElementById('salesTrendLoader');
            if (loader) loader.style.display = 'flex';

            let url = `/Admin/GetSalesTrend?period=${period}`;
            if (startDate) url += `&startDate=${startDate}`;
            if (endDate) url += `&endDate=${endDate}`;
            
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    if (salesTrendChart && data.labels && data.data) {
                        salesTrendChart.data.labels = data.labels;
                        salesTrendChart.data.datasets[0].data = data.data.map(item => item.sales);
                        salesTrendChart.data.datasets[1].data = data.data.map(item => item.transactions);
                        salesTrendChart.update();
                    }
                })
                .catch(error => {
                    console.error('Error loading sales trend:', error);
                })
                .finally(() => {
                    if (loader) loader.style.display = 'none';
                });
        }

        // Wire up Sales Trend period controls and initial load
        (function initSalesTrendControls(){
            const chips = [
                document.getElementById('trendDaily'),
                document.getElementById('trendWeekly'),
                document.getElementById('trendMonthly')
            ].filter(Boolean);
            chips.forEach(chip => chip.addEventListener('click', () => {
                chips.forEach(c => c.classList.remove('active'));
                chip.classList.add('active');
                const period = chip.getAttribute('data-period') || 'daily';
                loadSalesTrend(period);
            }));
            // Initial load
            loadSalesTrend('daily');
        })();

        // --- Enhanced chart theme switching with smooth transitions ---
        function updateChartTheme() {
            const legendsColor = textColor();
            const g = gridColor();
            const t = tickColor();
            const apply = (chart) => {
                if(!chart) return;
                
                // Add smooth transition effect
                chart.options.transitions = {
                    active: {
                        animation: {
                            duration: 300
                        }
                    }
                };
                
                if(chart.options.plugins?.legend?.labels) {
                    chart.options.plugins.legend.labels.color = legendsColor;
                    chart.options.plugins.legend.labels.font = { weight: 600 };
                }
                
                const scales = chart.options.scales || {};
                Object.keys(scales).forEach(axis => {
                    if(scales[axis].grid) {
                        scales[axis].grid.color = g;
                        scales[axis].grid.borderColor = g;
                    }
                    if(scales[axis].ticks) {
                        scales[axis].ticks.color = t;
                        scales[axis].ticks.font = { weight: 500 };
                    }
                    if(axis === 'r') {
                        if(scales[axis].angleLines) scales[axis].angleLines.color = g;
                        if(scales[axis].pointLabels) {
                            scales[axis].pointLabels.color = t;
                            scales[axis].pointLabels.font = { weight: 600 };
                        }
                    }
                });
                
                // Enhanced tooltip styling
                if(chart.options.plugins?.tooltip) {
                    chart.options.plugins.tooltip.backgroundColor = 'rgba(15, 23, 42, 0.95)';
                    chart.options.plugins.tooltip.titleColor = '#ffffff';
                    chart.options.plugins.tooltip.bodyColor = '#e5e7eb';
                    chart.options.plugins.tooltip.borderColor = 'rgba(255,255,255,0.1)';
                    chart.options.plugins.tooltip.borderWidth = 1;
                }
                
                chart.update('active');
            };
            apply(profitExpenseChart);
            apply(salesByDayChart);
            apply(salesTrendChart);
        }

        // --- Currency selector behavior & persistence ---
        (function initCurrency(){
            const select = document.getElementById('currencySelect');
            const container = getContainer();
            const savedCode = localStorage.getItem('currencyCode');
            const defaultCode = savedCode || symbolToCode(container?.dataset.currency || '֏') || 'AMD';

            const applyCurrency = (code) => {
                const symbol = codeToSymbol(code);
                if(container) container.dataset.currency = symbol; // single source of truth
                localStorage.setItem('currencyCode', code);
                // Update KPI text immediately if animation already done
                document.querySelectorAll('[data-countup]').forEach(el => {
                    el.setAttribute('data-symbol', symbol);
                    if (el.dataset.done === '1') {
                        const raw = Number(el.getAttribute('data-value')) || 0;
                        const format = (el.getAttribute('data-format') || 'int').toLowerCase();
                        const decimals = parseInt(el.getAttribute('data-decimals') || '0', 10);
                        const nf = new Intl.NumberFormat(undefined, { minimumFractionDigits: 0, maximumFractionDigits: decimals });
                        el.textContent = (format === 'currency') ? (symbol + ' ' + nf.format(raw)) : nf.format(raw);
                    }
                });
                // Refresh charts to show the new symbol in ticks/tooltips
                if (profitExpenseChart) profitExpenseChart.update('none');
                if (salesByDayChart) salesByDayChart.update('none');
            };

            // Initialize selector and apply currency
            if (select) {
                select.value = defaultCode;
                applyCurrency(defaultCode);
                select.addEventListener('change', () => applyCurrency(select.value));
            }
        })();

        // --- Recent Sales & Product Info functionality ---
        (function initDashboardData(){
            const recentSalesTable = document.getElementById('recentSalesTable');
            const searchBtn = document.getElementById('searchSales');
            const clearBtn = document.getElementById('clearSearch');
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');

            // Format currency consistently
            const formatCurrency = (amount) => {
                const symbol = getCurrencySymbol();
                const formatter = new Intl.NumberFormat(undefined, { maximumFractionDigits: 0 });
                return `${symbol} ${formatter.format(amount)}`;
            };

            // Format date for display
            const formatDate = (dateStr) => {
                const date = new Date(dateStr);
                return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            };

            // Render recent sales data with modern styling
            const renderRecentSales = (salesData) => {
                if (!salesData || salesData.length === 0) {
                    recentSalesTable.innerHTML = `
                        <div class="text-center" style="padding: 3rem; color: var(--text-muted);">
                            <i class="fa-solid fa-inbox" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                            <div style="font-size: 1.1rem; font-weight: 500;">No sales data available</div>
                            <div style="font-size: 0.9rem; margin-top: 0.5rem;">Try adjusting your date range</div>
                        </div>`;
                    return;
                }

                let html = `
                    <div class="table-responsive">
                        <table class="table table-hover" style="color: var(--text); border-collapse: separate; border-spacing: 0 8px;">
                            <thead>
                                <tr style="background: var(--card-bg); backdrop-filter: var(--glass); border-radius: 12px;">
                                    <th style="padding: 16px; border: none; font-weight: 600; color: var(--text);">📋 Transaction</th>
                                    <th style="padding: 16px; border: none; font-weight: 600; color: var(--text);">👤 Customer</th>
                                    <th style="padding: 16px; border: none; font-weight: 600; color: var(--text);">📦 Items</th>
                                    <th style="padding: 16px; border: none; font-weight: 600; color: var(--text);">💰 Total</th>
                                    <th style="padding: 16px; border: none; font-weight: 600; color: var(--text);">📅 Date</th>
                                    <th style="padding: 16px; border: none; font-weight: 600; color: var(--text);">⚡ Action</th>
                                </tr>
                            </thead>
                            <tbody>
                `;

                salesData.forEach((sale, index) => {
                    html += `
                        <tr style="background: var(--card-bg); backdrop-filter: var(--glass); border-radius: 12px; margin-bottom: 8px; transition: all 0.3s ease; animation: slideInUp 0.5s ease both; animation-delay: ${index * 0.1}s;">
                            <td style="padding: 16px; border: none; border-radius: 12px 0 0 12px;">
                                <strong style="color: var(--info-1);">#${sale.TransactionId}</strong>
                            </td>
                            <td style="padding: 16px; border: none;">
                                <div style="font-weight: 500;">${sale.CustomerName}</div>
                            </td>
                            <td style="padding: 16px; border: none;">
                                <span style="background: linear-gradient(135deg, var(--info-1), var(--info-2)); color: white; padding: 4px 8px; border-radius: 8px; font-size: 0.8rem; font-weight: 600;">${sale.ItemCount} items</span>
                            </td>
                            <td style="padding: 16px; border: none;">
                                <strong style="color: var(--success-1); font-size: 1.1rem;">${formatCurrency(sale.TotalAmount)}</strong>
                            </td>
                            <td style="padding: 16px; border: none;">
                                <div style="font-size: 0.9rem; color: var(--text-muted);">${formatDate(sale.Date)}</div>
                            </td>
                            <td style="padding: 16px; border: none; border-radius: 0 12px 12px 0;">
                                <a href="/Admin/CustomerDetail/${sale.CustomerId}" 
                                   style="background: linear-gradient(135deg, var(--violet-1), var(--violet-2)); color: white; padding: 8px 16px; border-radius: 8px; text-decoration: none; font-weight: 600; font-size: 0.9rem; transition: all 0.3s ease; display: inline-flex; align-items: center; gap: 6px;">
                                    <i class="fa fa-eye"></i> View
                                </a>
                            </td>
                        </tr>
                    `;
                });

                html += `
                            </tbody>
                        </table>
                    </div>
                `;

                recentSalesTable.innerHTML = html;
            };
            
            // Fetch recent sales (last 20) and render
            const loadRecentSales = () => {
                if (!recentSalesTable) return;
                fetch('/Admin/GetRecentSales')
                    .then(r => r.json())
                    .then(data => renderRecentSales(data))
                    .catch(err => {
                        console.error('Failed to load recent sales', err);
                        recentSalesTable.innerHTML = '<div class="text-center text-danger">Failed to load recent sales</div>';
                    });
            };

            // Fetch sales by optional date range and render
            const loadSalesByDate = () => {
                if (!recentSalesTable) return;
                const qs = [];
                if (startDateInput && startDateInput.value) qs.push('startDate=' + encodeURIComponent(startDateInput.value));
                if (endDateInput && endDateInput.value) qs.push('endDate=' + encodeURIComponent(endDateInput.value));
                const url = '/Admin/SearchSalesByDate' + (qs.length ? '?' + qs.join('&') : '');
                fetch(url)
                    .then(r => r.json())
                    .then(data => renderRecentSales(data))
                    .catch(err => {
                        console.error('Failed to search sales by date', err);
                        recentSalesTable.innerHTML = '<div class="text-center text-danger">Failed to search sales</div>';
                    });
            };

            // Wire up search and clear buttons
            if (searchBtn) {
                searchBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    loadSalesByDate();
                });
            }
            if (clearBtn) {
                clearBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (startDateInput) startDateInput.value = '';
                    if (endDateInput) endDateInput.value = '';
                    loadRecentSales();
                });
            }

            // Initialize data on page load
            loadRecentSales();
        })();
    </script>
}
