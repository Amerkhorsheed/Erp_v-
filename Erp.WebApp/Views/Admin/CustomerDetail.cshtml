@{
    ViewBag.Title = "Customer Detail";
}

<!-- Fonts + Icons -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" crossorigin="anonymous" referrerpolicy="no-referrer" />

<style>
    :root {
        --bg: #f8fafc;
        --card-bg: #ffffff;
        --card-border: #e2e8f0;
        --text: #0f172a;
        --text-muted: #64748b;
        --primary: #3b82f6;
        --primary-light: #dbeafe;
        --success: #10b981;
        --success-light: #d1fae5;
        --warning: #f59e0b;
        --warning-light: #fef3c7;
        --danger: #ef4444;
        --danger-light: #fee2e2;
        --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    body {
        background-color: var(--bg);
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        color: var(--text);
    }

    .page-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid var(--card-border);
    }

    .page-title {
        font-size: 1.875rem;
        font-weight: 700;
        margin: 0;
        color: var(--text);
    }

    .btn-back {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        background: var(--primary);
        color: white;
        text-decoration: none;
        border-radius: 0.5rem;
        font-weight: 500;
        transition: all 0.2s ease;
        box-shadow: var(--shadow);
    }

    .btn-back:hover {
        background: #2563eb;
        color: white;
        text-decoration: none;
        transform: translateY(-1px);
        box-shadow: var(--shadow-lg);
    }

    .customer-card {
        background: var(--card-bg);
        border: 1px solid var(--card-border);
        border-radius: 0.75rem;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow);
    }

    .customer-info {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .info-item {
        display: flex;
        flex-direction: column;
    }

    .info-label {
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--text-muted);
        margin-bottom: 0.25rem;
    }

    .info-value {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text);
    }

    .balance-card {
        background: linear-gradient(135deg, var(--success), #059669);
        color: white;
        border-radius: 0.75rem;
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow-lg);
    }

    .balance-title {
        font-size: 0.875rem;
        font-weight: 500;
        opacity: 0.9;
        margin-bottom: 0.5rem;
    }

    .balance-amount {
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
    }

    .sales-section {
        background: var(--card-bg);
        border: 1px solid var(--card-border);
        border-radius: 0.75rem;
        overflow: hidden;
        box-shadow: var(--shadow);
    }

    .section-header {
        background: linear-gradient(135deg, #f8fafc, #f1f5f9);
        padding: 1.5rem 2rem;
        border-bottom: 1px solid var(--card-border);
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
        color: var(--text);
    }

    .table-container {
        overflow-x: auto;
    }

    .sales-table {
        width: 100%;
        border-collapse: collapse;
        margin: 0;
    }

    .sales-table th {
        background: #f8fafc;
        padding: 1rem;
        text-align: left;
        font-weight: 600;
        color: var(--text);
        border-bottom: 1px solid var(--card-border);
        font-size: 0.875rem;
    }

    .sales-table td {
        padding: 1rem;
        border-bottom: 1px solid #f1f5f9;
        color: var(--text);
    }

    .sales-table tbody tr:hover {
        background: #f8fafc;
    }

    .transaction-id {
        font-weight: 600;
        color: var(--primary);
    }

    .badge {
        display: inline-flex;
        align-items: center;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .badge-success {
        background: var(--success-light);
        color: var(--success);
    }

    .badge-warning {
        background: var(--warning-light);
        color: var(--warning);
    }

    .badge-danger {
        background: var(--danger-light);
        color: var(--danger);
    }

    .amount {
        font-weight: 600;
        font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    }

    .loading {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 3rem;
        color: var(--text-muted);
    }

    .spinner {
        width: 2rem;
        height: 2rem;
        border: 3px solid var(--card-border);
        border-top: 3px solid var(--primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-right: 1rem;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        color: var(--text-muted);
    }

    .empty-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }
</style>

<div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header">
        <h1 class="page-title">Customer Details</h1>
        <a href="/Admin" class="btn-back">
            <i class="fas fa-arrow-left"></i>
            Back to Dashboard
        </a>
    </div>

    <!-- Customer Information Card -->
    <div id="customerInfo" class="customer-card">
        <div class="loading">
            <div class="spinner"></div>
            Loading customer information...
        </div>
    </div>

    <!-- Balance Information -->
    <div id="balanceInfo" class="balance-card" style="display: none;">
        <div class="balance-title">Outstanding Balance</div>
        <div class="balance-amount" id="balanceAmount">$0.00</div>
    </div>

    <!-- Sales History -->
    <div class="sales-section">
        <div class="section-header">
            <h2 class="section-title">Sales History</h2>
        </div>
        <div class="table-container">
            <div id="salesTable" class="loading">
                <div class="spinner"></div>
                Loading sales data...
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get customer data from ViewBag
        const customerData = @Html.Raw(ViewBag.CustomerJson ?? "null");
        
        if (!customerData) {
            document.getElementById('customerInfo').innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle empty-icon"></i>
                    <p>Customer data not found</p>
                </div>
            `;
            return;
        }

        // Render customer information
        renderCustomerInfo(customerData.Customer);
        
        // Render balance information
        renderBalanceInfo(customerData.Customer);
        
        // Render sales history
        renderSalesHistory(customerData.Sales);
    });

    function renderCustomerInfo(customer) {
        const customerInfoDiv = document.getElementById('customerInfo');
        
        customerInfoDiv.innerHTML = `
            <div class="customer-info">
                <div class="info-item">
                    <span class="info-label">Customer Name</span>
                    <span class="info-value">${customer.CustomerName || 'N/A'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Phone Number</span>
                    <span class="info-value">${customer.Cust_Phone || 'N/A'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Email Address</span>
                    <span class="info-value">${customer.Email || 'N/A'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Address</span>
                    <span class="info-value">${customer.Cust_Address || 'N/A'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Customer ID</span>
                    <span class="info-value">#${customer.ID}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Notes</span>
                    <span class="info-value">${customer.Notes || 'No notes'}</span>
                </div>
            </div>
        `;
    }

    function renderBalanceInfo(customer) {
        const balanceInfoDiv = document.getElementById('balanceInfo');
        const balanceAmountSpan = document.getElementById('balanceAmount');
        
        const balance = customer.baky || 0;
        
        if (balance > 0) {
            balanceInfoDiv.style.display = 'block';
            balanceAmountSpan.textContent = formatCurrency(balance);
            
            // Change color based on balance
            if (balance > 1000) {
                balanceInfoDiv.style.background = 'linear-gradient(135deg, var(--danger), #dc2626)';
            } else if (balance > 500) {
                balanceInfoDiv.style.background = 'linear-gradient(135deg, var(--warning), #d97706)';
            }
        }
    }

    function renderSalesHistory(sales) {
        const salesTableDiv = document.getElementById('salesTable');
        
        if (!sales || sales.length === 0) {
            salesTableDiv.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-shopping-cart empty-icon"></i>
                    <p>No sales history found for this customer</p>
                </div>
            `;
            return;
        }

        let tableHTML = `
            <table class="sales-table">
                <thead>
                    <tr>
                        <th>Transaction ID</th>
                        <th>Product ID</th>
                        <th>Quantity</th>
                        <th>Unit Price</th>
                        <th>Total</th>
                        <th>Payment Status</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
        `;

        sales.forEach(sale => {
            const total = sale.Price * sale.SalesAmount;
            const paymentStatus = getPaymentStatus(sale.Madfou3, sale.Baky);
            const statusBadge = getStatusBadge(paymentStatus);
            
            tableHTML += `
                <tr>
                    <td><span class="transaction-id">#${sale.TransactionId || sale.SalesID}</span></td>
                    <td>#${sale.ProductID}</td>
                    <td>${sale.SalesAmount}</td>
                    <td class="amount">${formatCurrency(sale.Price)}</td>
                    <td class="amount">${formatCurrency(total)}</td>
                    <td>${statusBadge}</td>
                    <td>${formatDate(sale.SalesDate)}</td>
                </tr>
            `;
        });

        tableHTML += `
                </tbody>
            </table>
        `;

        salesTableDiv.innerHTML = tableHTML;
    }

    function getPaymentStatus(madfou3, baky) {
        if (baky === 0) return 'Fully Paid';
        if (madfou3 > 0 && baky > 0) return 'Partial Payment';
        if (madfou3 === 0) return 'Unpaid';
        return 'Unknown';
    }

    function getStatusBadge(status) {
        switch (status) {
            case 'Fully Paid':
                return '<span class="badge badge-success"><i class="fas fa-check-circle"></i> Fully Paid</span>';
            case 'Partial Payment':
                return '<span class="badge badge-warning"><i class="fas fa-clock"></i> Partial</span>';
            case 'Unpaid':
                return '<span class="badge badge-danger"><i class="fas fa-times-circle"></i> Unpaid</span>';
            default:
                return '<span class="badge badge-secondary">Unknown</span>';
        }
    }

    function formatCurrency(amount) {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 2
        }).format(amount);
    }

    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
</script>