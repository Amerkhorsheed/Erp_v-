@model Erp.WebApp.ViewModels.PartialPaymentSaleViewModel

@{
    ViewBag.Title = "Partial Payment Sales";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
        /* ================================================================= */
        /* =         MODERN PARTIAL PAYMENT SALES STYLES                  = */
        /* ================================================================= */

        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --warning-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            --dark-gradient: linear-gradient(135deg, #434343 0%, #000000 100%);
            --card-bg: rgba(255, 255, 255, 0.95);
            --glass-bg: rgba(255, 255, 255, 0.1);
            --shadow-light: 0 8px 32px rgba(31, 38, 135, 0.37);
            --shadow-heavy: 0 15px 35px rgba(31, 38, 135, 0.5);
            --border-radius: 20px;
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .glass-card {
            background: var(--card-bg);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-light);
            transition: var(--transition);
            overflow: hidden;
        }

        .glass-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-heavy);
        }

        .gradient-header {
            background: var(--primary-gradient);
            color: white;
            padding: 1.5rem;
            margin: -1px -1px 0 -1px;
            border-radius: var(--border-radius) var(--border-radius) 0 0;
        }

        .gradient-header h3 {
            margin: 0;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .modern-input {
            background: rgba(255, 255, 255, 0.9);
            border: 2px solid transparent;
            border-radius: 15px;
            padding: 12px 20px;
            font-size: 16px;
            transition: var(--transition);
            backdrop-filter: blur(10px);
        }

        .modern-input:focus {
            outline: none;
            border-color: #667eea;
            background: rgba(255, 255, 255, 1);
            box-shadow: 0 0 20px rgba(102, 126, 234, 0.3);
            transform: scale(1.02);
        }

        .modern-select {
            background: rgba(255, 255, 255, 0.9);
            border: 2px solid transparent;
            border-radius: 15px;
            padding: 12px 20px;
            font-size: 16px;
            transition: var(--transition);
            backdrop-filter: blur(10px);
            cursor: pointer;
        }

        .modern-select:focus {
            outline: none;
            border-color: #667eea;
            background: rgba(255, 255, 255, 1);
            box-shadow: 0 0 20px rgba(102, 126, 234, 0.3);
        }

        /* --- STYLES FOR IMPROVED PRODUCT SEARCH --- */
        .product-search-container {
            position: relative;
        }

        #productList {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            z-index: 1000;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 15px;
            box-shadow: var(--shadow-light);
            border: 1px solid rgba(255, 255, 255, 0.2);
            max-height: 350px;
            overflow-y: auto;
            display: none;
            padding: 10px;
        }

        .product-search-item {
            display: flex;
            align-items: center;
            padding: 10px;
            margin-bottom: 5px;
            border-radius: 10px;
            transition: var(--transition);
            gap: 15px;
        }

        .product-search-item:hover {
            background: rgba(102, 126, 234, 0.1);
        }

        .product-search-item.disabled {
            opacity: 0.5;
            background: #f8f9fa;
            pointer-events: none;
        }

        .product-search-image {
            width: 60px;
            height: 60px;
            border-radius: 10px;
            object-fit: cover;
            flex-shrink: 0;
        }

        .product-search-details {
            flex-grow: 1;
            /* FIX: Allows the flex item to shrink, enabling text wrapping */
            min-width: 0;
        }

        .product-search-details h6 {
            margin: 0 0 5px 0;
            font-weight: 600;
            /* FIX: Allows long text to wrap to a new line */
            white-space: normal;
            word-wrap: break-word;
        }

        .product-search-info {
            font-size: 0.85rem;
            color: #6c757d;
        }

        .product-search-actions {
            flex-shrink: 0;
        }

        .btn-add-product {
            background: var(--primary-gradient);
            color: white;
            border: none;
            border-radius: 10px;
            padding: 8px 15px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
        }

        .btn-add-product:hover:not(:disabled) {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-add-product:disabled {
            background: #adb5bd;
            cursor: not-allowed;
        }

        .search-empty-state {
            padding: 40px;
            text-align: center;
            color: #6c757d;
        }

        .search-empty-state i {
            font-size: 3rem;
            margin-bottom: 15px;
            opacity: 0.6;
        }

        .modern-table {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(20px);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: var(--shadow-light);
        }

        .modern-table thead {
            background: var(--primary-gradient);
            color: white;
        }

        .modern-table th,
        .modern-table td {
            padding: 15px;
            border: none;
            vertical-align: middle;
        }

        .modern-table tbody tr {
            transition: var(--transition);
        }

        .modern-table tbody tr:hover {
            background: rgba(102, 126, 234, 0.1);
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 25px;
            padding: 5px;
        }

        .quantity-btn {
            width: 35px;
            height: 35px;
            border: none;
            border-radius: 50%;
            background: var(--primary-gradient);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
            font-weight: bold;
        }

        .quantity-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .quantity-input {
            width: 60px;
            text-align: center;
            border: none;
            background: transparent;
            font-weight: bold;
            font-size: 16px;
        }

        .quantity-input:focus {
            outline: none;
        }

        .remove-btn {
            background: var(--secondary-gradient);
            border: none;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            color: white;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .remove-btn:hover {
            transform: scale(1.1) rotate(90deg);
            box-shadow: 0 5px 15px rgba(245, 87, 108, 0.4);
        }

        .payment-options {
            display: flex;
            gap: 20px;
            margin: 20px 0;
        }

        .payment-option {
            flex: 1;
            position: relative;
        }

        .payment-option input[type="radio"] {
            display: none;
        }

        .payment-option label {
            display: block;
            padding: 20px;
            background: rgba(255, 255, 255, 0.8);
            border: 2px solid transparent;
            border-radius: 15px;
            cursor: pointer;
            transition: var(--transition);
            text-align: center;
            font-weight: 600;
            backdrop-filter: blur(10px);
        }

        .payment-option input[type="radio"]:checked+label {
            background: var(--success-gradient);
            color: white;
            transform: scale(1.05);
            box-shadow: var(--shadow-light);
        }

        .payment-option label:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-light);
        }

        .payment-amount-container {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            backdrop-filter: blur(20px);
            display: none;
        }

        .payment-amount-container.show {
            display: block;
            animation: slideIn 0.3s ease-out;
        }

        keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .total-section {
            background: var(--dark-gradient);
            color: white;
            border-radius: 15px;
            padding: 25px;
            margin-top: 20px;
        }

        .total-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            font-size: 18px;
        }

        .total-row.grand-total {
            border-top: 2px solid rgba(255, 255, 255, 0.3);
            padding-top: 15px;
            font-size: 24px;
            font-weight: bold;
        }

        .modern-btn {
            background: var(--primary-gradient);
            border: none;
            border-radius: 25px;
            padding: 15px 30px;
            color: white;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            width: 100%;
            margin-top: 20px;
        }

        .modern-btn:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
        }

        .modern-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .success-panel {
            background: var(--card-bg);
            backdrop-filter: blur(20px);
            border-radius: var(--border-radius);
            padding: 40px;
            text-align: center;
            box-shadow: var(--shadow-heavy);
            display: none;
        }

        .success-panel.show {
            display: block;
            animation: successZoom 0.5s ease-out;
        }

        keyframes successZoom {
            from {
                opacity: 0;
                transform: scale(0.8);
            }

            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        .success-icon {
            font-size: 80px;
            color: #4facfe;
            margin-bottom: 20px;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 30px;
        }

        .action-btn {
            background: var(--success-gradient);
            border: none;
            border-radius: 25px;
            padding: 12px 25px;
            color: white;
            text-decoration: none;
            font-weight: 600;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(79, 172, 254, 0.4);
            color: white;
            text-decoration: none;
        }

        .action-btn.whatsapp {
            background: linear-gradient(135deg, #25d366 0%, #128c7e 100%);
        }

        .action-btn.print {
            background: var(--warning-gradient);
        }

        .action-btn.new-sale {
            background: var(--dark-gradient);
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 20px 25px;
            border-radius: 15px;
            color: white;
            font-weight: 600;
            z-index: 2000;
            transform: translateX(120%);
            opacity: 0;
            transition: var(--transition);
            backdrop-filter: blur(20px);
            box-shadow: var(--shadow-light);
        }

        .toast.show {
            transform: translateX(0);
            opacity: 1;
        }

        .toast.success { background: var(--success-gradient); }
        .toast.error { background: var(--secondary-gradient); }
        .toast.warning { background: var(--warning-gradient); }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        .empty-state i {
            font-size: 60px;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top: 3px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        media (max-width: 768px) {
            .payment-options, .action-buttons {
                flex-direction: column;
                gap: 10px;
            }
            .modern-table { font-size: 14px; }
            .modern-table th, .modern-table td { padding: 10px; }
        }
    </style>
}

<!-- Main Container -->
<div class="container-fluid py-4">
    <!-- Sale Creation Panel -->
    <div id="saleCreationPanel">
        <div class="row g-4">
            <!-- Left Column: Product Selection & Cart -->
            <div class="col-lg-8">
                <!-- Product Search Card -->
                <div class="glass-card mb-4">
                    <div class="gradient-header">
                        <h3><i class="fas fa-search"></i> Product Search</h3>
                    </div>
                    <div class="p-4">
                        <div class="product-search-container">
                            <input type="text" id="productSearch" class="modern-input w-100"
                                   placeholder="🔍 Start typing to search for products...">
                            <div id="productList"></div>
                        </div>
                    </div>
                </div>

                <!-- Shopping Cart Card -->
                <div class="glass-card">
                    <div class="gradient-header">
                        <h3><i class="fas fa-shopping-cart"></i> Shopping Cart</h3>
                    </div>
                    <div class="p-4">
                        <div class="table-responsive">
                            <table class="table modern-table">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Quantity</th>
                                        <th>Unit Price</th>
                                        <th>Discount</th>
                                        <th>Total</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id="cartItems">
                                    <!-- Cart items will be populated here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column: Customer & Payment -->
            <div class="col-lg-4">
                <!-- Customer Selection Card -->
                <div class="glass-card mb-4">
                    <div class="gradient-header">
                        <h3><i class="fas fa-user"></i> Customer</h3>
                    </div>
                    <div class="p-4">
                        <select id="customerSelect" class="modern-select w-100">
                            <option value="">Select a customer...</option>
                        </select>
                        <div id="customerInfo" class="mt-3" style="display: none;">
                            <div class="d-flex align-items-center gap-2">
                                <i class="fas fa-envelope text-primary"></i>
                                <span id="customerEmail" class="text-muted"></span>
                            </div>
                            <div class="d-flex align-items-center gap-2 mt-1">
                                <i class="fas fa-phone text-primary"></i>
                                <span id="customerPhone" class="text-muted"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Payment Options Card -->
                <div class="glass-card mb-4">
                    <div class="gradient-header">
                        <h3><i class="fas fa-credit-card"></i> Payment Options</h3>
                    </div>
                    <div class="p-4">
                        <div class="payment-options">
                            <div class="payment-option">
                                <input type="radio" id="fullPayment" name="paymentType" value="full" checked>
                                <label for="fullPayment"><i class="fas fa-money-bill-wave"></i><br>Full Payment</label>
                            </div>
                            <div class="payment-option">
                                <input type="radio" id="partialPayment" name="paymentType" value="partial">
                                <label for="partialPayment"><i class="fas fa-coins"></i><br>Partial Payment</label>
                            </div>
                            <div class="payment-option">
                                <input type="radio" id="noPayment" name="paymentType" value="none">
                                <label for="noPayment"><i class="fas fa-clock"></i><br>No Payment</label>
                            </div>
                        </div>

                        <div id="partialAmountContainer" class="payment-amount-container">
                            <label for="paidAmount" class="form-label fw-bold"><i class="fas fa-dollar-sign"></i> Amount to Pay Now</label>
                            <input type="number" id="paidAmount" class="modern-input w-100" placeholder="Enter amount to pay now" step="0.01" min="0">
                        </div>
                    </div>
                </div>

                <!-- Total Summary Card -->
                <div class="glass-card">
                    <div class="gradient-header">
                        <h3><i class="fas fa-calculator"></i> Summary</h3>
                    </div>
                    <div class="p-4">
                        <div class="total-section">
                            <div class="total-row">
                                <span>Subtotal:</span>
                                <span id="subtotal">$0.00</span>
                            </div>
                            <div class="total-row">
                                <span>Total Discount:</span>
                                <span id="totalDiscount" class="text-warning">-$0.00</span>
                            </div>
                            <div class="total-row grand-total">
                                <span>Grand Total:</span>
                                <span id="grandTotal">$0.00</span>
                            </div>
                            <div id="paymentSummary" style="display: none;">
                                <div class="total-row">
                                    <span>Amount Paying:</span>
                                    <span id="payingAmount" class="text-success">$0.00</span>
                                </div>
                                <div class="total-row">
                                    <span>Remaining:</span>
                                    <span id="remainingAmount" class="text-danger">$0.00</span>
                                </div>
                            </div>
                        </div>

                        <button id="completeSaleBtn" class="modern-btn" disabled>
                            <i class="fas fa-check-circle"></i> Complete Sale
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Success Panel -->
    <div id="successPanel" class="success-panel">
        <div class="success-icon"><i class="fas fa-check-circle"></i></div>
        <h2 class="mb-3">Sale Completed Successfully!</h2>
        <p id="successMessage" class="lead mb-4"></p>
        <div class="action-buttons">
            <a id="viewInvoiceBtn" href="#" class="action-btn"><i class="fas fa-receipt"></i> View Invoice</a>
            <button id="printInvoiceBtn" class="action-btn print"><i class="fas fa-print"></i> Print Invoice</button>
            <button id="emailInvoiceBtn" class="action-btn"><i class="fas fa-envelope"></i> Email Invoice</button>
            <a id="whatsappBtn" href="#" class="action-btn whatsapp" target="_blank" style="display: none;"><i class="fab fa-whatsapp"></i> Send WhatsApp</a>
            <button id="newSaleBtn" class="action-btn new-sale"><i class="fas fa-plus"></i> New Sale</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Modern Partial Payment Sales Application
        const PartialPaymentApp = {
            state: {
                cart: [],
                customers: @Html.Raw(ViewBag.CustomersJson ?? "[]"),
                products: @Html.Raw(ViewBag.ProductsJson ?? "[]"),
                currentSale: null,
                searchTimeout: null
            },

            dom: {},

            init() {
                this.cacheDom();
                this.bindEvents();
                this.loadCustomers();
                this.renderCart();
            },

            cacheDom() {
                this.dom = {
                    productSearch: document.getElementById('productSearch'),
                    productList: document.getElementById('productList'),
                    customerSelect: document.getElementById('customerSelect'),
                    customerInfo: document.getElementById('customerInfo'),
                    customerEmail: document.getElementById('customerEmail'),
                    customerPhone: document.getElementById('customerPhone'),
                    cartItems: document.getElementById('cartItems'),
                    subtotal: document.getElementById('subtotal'),
                    totalDiscount: document.getElementById('totalDiscount'),
                    grandTotal: document.getElementById('grandTotal'),
                    paymentSummary: document.getElementById('paymentSummary'),
                    payingAmount: document.getElementById('payingAmount'),
                    remainingAmount: document.getElementById('remainingAmount'),
                    partialAmountContainer: document.getElementById('partialAmountContainer'),
                    paidAmount: document.getElementById('paidAmount'),
                    completeSaleBtn: document.getElementById('completeSaleBtn'),
                    saleCreationPanel: document.getElementById('saleCreationPanel'),
                    successPanel: document.getElementById('successPanel'),
                    successMessage: document.getElementById('successMessage'),
                    viewInvoiceBtn: document.getElementById('viewInvoiceBtn'),
                    printInvoiceBtn: document.getElementById('printInvoiceBtn'),
                    whatsappBtn: document.getElementById('whatsappBtn'),
                    newSaleBtn: document.getElementById('newSaleBtn')
                };
            },

            bindEvents() {
                // Product search
                this.dom.productSearch.addEventListener('input', (e) => {
                    clearTimeout(this.state.searchTimeout);
                    this.state.searchTimeout = setTimeout(() => this.searchProducts(e.target.value), 300);
                });

                // Hide product list when clicking outside
                document.addEventListener('click', (e) => {
                    if (!this.dom.productSearch.contains(e.target)) {
                        this.dom.productList.style.display = 'none';
                    }
                });

                // Customer selection
                this.dom.customerSelect.addEventListener('change', () => {
                    this.updateCustomerInfo();
                    this.updateUI();
                });

                // Payment type changes
                document.querySelectorAll('input[name="paymentType"]').forEach(radio => {
                    radio.addEventListener('change', () => {
                        this.updatePaymentOptions();
                        this.updatePaymentSummary();
                        this.updateUI();
                    });
                });

                // Paid amount changes
                this.dom.paidAmount.addEventListener('input', () => {
                    this.updatePaymentSummary();
                    this.updateUI();
                });

                // Complete sale
                this.dom.completeSaleBtn.addEventListener('click', () => this.completeSale());
                this.dom.newSaleBtn.addEventListener('click', () => this.resetSale());
                this.dom.printInvoiceBtn.addEventListener('click', () => this.printInvoice());
                document.getElementById('emailInvoiceBtn').addEventListener('click', () => this.emailInvoice());
            },

            loadCustomers() {
                this.dom.customerSelect.innerHTML = '<option value="">Select a customer...</option>';
                this.state.customers.forEach(customer => {
                    const option = new Option(customer.CustomerName, customer.ID);
                    this.dom.customerSelect.add(option);
                });
            },

            searchProducts(query) {
                if (!query || query.length < 2) {
                    this.dom.productList.style.display = 'none';
                    return;
                }

                const filteredProducts = this.state.products.filter(product =>
                    product.ProductName.toLowerCase().includes(query.toLowerCase())
                );

                if (filteredProducts.length === 0) {
                    this.dom.productList.innerHTML = `
                        <div class="search-empty-state">
                            <i class="fas fa-box-open"></i>
                            <h5>No Products Found</h5>
                            <p>Try a different search term.</p>
                        </div>
                    `;
                } else {
                    this.dom.productList.innerHTML = filteredProducts.map(product => {
                        const isInCart = this.state.cart.some(item => item.productId === product.ProductID);
                        const isOutOfStock = product.stockAmount <= 0;
                        const isDisabled = isInCart || isOutOfStock;

                        let actionButton;
                        if (isInCart) {
                            actionButton = `<button class="btn-add-product" disabled><i class="fas fa-check"></i> In Cart</button>`;
                        } else if (isOutOfStock) {
                            actionButton = `<button class="btn-add-product" disabled>Out of Stock</button>`;
                        } else {
                            actionButton = `<button class="btn-add-product" onclick="event.stopPropagation(); PartialPaymentApp.addToCart(${product.ProductID})"><i class="fas fa-plus"></i> Add</button>`;
                        }

                        return `
                            <div class="product-search-item ${isDisabled ? 'disabled' : ''}">
                                <!-- Using a placeholder for image -->
                                <img src="https://placehold.co/60x60/667eea/white?text=${product.ProductName.substring(0,1)}"
                                     alt="${product.ProductName}" class="product-search-image">
                                <div class="product-search-details">
                                    <h6>${product.ProductName}</h6>
                                    <div class="product-search-info">
                                        <strong>Price:</strong> $${product.Sale_Price.toFixed(2)} | <strong>Stock:</strong> ${product.stockAmount}
                                    </div>
                                </div>
                                <div class="product-search-actions">
                                    ${actionButton}
                                </div>
                            </div>
                        `;
                    }).join('');
                }

                this.dom.productList.style.display = 'block';
            },

            addToCart(productId) {
                const product = this.state.products.find(p => p.ProductID === productId);
                if (!product || product.stockAmount <= 0) {
                    this.showToast('Product is out of stock', 'error');
                    return;
                };

                const existingItem = this.state.cart.find(item => item.productId === productId);
                if (existingItem) {
                    this.showToast('Product already in cart', 'warning');
                    return;
                }

                this.state.cart.push({
                    productId: product.ProductID,
                    productName: product.ProductName,
                    quantity: 1,
                    unitPrice: product.Sale_Price,
                    discount: 0,
                    maxStock: product.stockAmount,
                    maxDiscount: product.MaxDiscount || 0
                });

                this.dom.productSearch.value = '';
                this.dom.productList.style.display = 'none';
                this.renderCart();
                this.updateTotals();
                this.updateUI();
                this.showToast('Product added to cart', 'success');
            },

            updateCartItem(index, field, value) {
                const item = this.state.cart[index];
                if (!item) return;

                if (field === 'quantity') {
                    value = Math.max(1, Math.min(parseInt(value) || 1, item.maxStock));
                } else if (field === 'discount') {
                    const maxDiscount = item.quantity * item.unitPrice;
                    value = Math.max(0, Math.min(parseFloat(value) || 0, maxDiscount));
                }

                item[field] = value;
                this.renderCart();
                this.updateTotals();
                this.updatePaymentSummary();
            },

            removeFromCart(index) {
                this.state.cart.splice(index, 1);
                this.renderCart();
                this.updateTotals();
                this.updatePaymentSummary();
                this.updateUI();
                this.showToast('Product removed from cart', 'success');
            },

            renderCart() {
                if (this.state.cart.length === 0) {
                    this.dom.cartItems.innerHTML = `<tr><td colspan="6"><div class="empty-state"><i class="fas fa-shopping-cart"></i><p>Your cart is empty</p></div></td></tr>`;
                    return;
                }

                this.dom.cartItems.innerHTML = this.state.cart.map((item, index) => {
                    const total = (item.quantity * item.unitPrice) - item.discount;
                    return `
                        <tr>
                            <td><strong>${item.productName}</strong></td>
                            <td>
                                <div class="quantity-controls">
                                    <button class="quantity-btn" onclick="PartialPaymentApp.updateCartItem(${index}, 'quantity', ${item.quantity - 1})"><i class="fas fa-minus"></i></button>
                                    <input type="number" class="quantity-input" value="${item.quantity}" onchange="PartialPaymentApp.updateCartItem(${index}, 'quantity', this.value)" min="1" max="${item.maxStock}">
                                    <button class="quantity-btn" onclick="PartialPaymentApp.updateCartItem(${index}, 'quantity', ${item.quantity + 1})"><i class="fas fa-plus"></i></button>
                                </div>
                            </td>
                            <td>$${item.unitPrice.toFixed(2)}</td>
                            <td><input type="number" class="modern-input" value="${item.discount.toFixed(2)}" onchange="PartialPaymentApp.updateCartItem(${index}, 'discount', this.value)" min="0" step="0.01" style="width: 100px;"></td>
                            <td><strong>$${total.toFixed(2)}</strong></td>
                            <td><button class="remove-btn" onclick="PartialPaymentApp.removeFromCart(${index})"><i class="fas fa-trash"></i></button></td>
                        </tr>
                    `;
                }).join('');
            },

            updateTotals() {
                const subtotal = this.state.cart.reduce((sum, item) => sum + (item.quantity * item.unitPrice), 0);
                const totalDiscount = this.state.cart.reduce((sum, item) => sum + item.discount, 0);
                const grandTotal = subtotal - totalDiscount;

                this.dom.subtotal.textContent = `$${subtotal.toFixed(2)}`;
                this.dom.totalDiscount.textContent = `-$${totalDiscount.toFixed(2)}`;
                this.dom.grandTotal.textContent = `$${grandTotal.toFixed(2)}`;

                if (this.dom.paidAmount) this.dom.paidAmount.max = grandTotal.toFixed(2);
            },

            updateCustomerInfo() {
                const customerId = this.dom.customerSelect.value;
                if (customerId) {
                    const customer = this.state.customers.find(c => c.ID == customerId);
                    if (customer) {
                        this.dom.customerEmail.textContent = customer.Email || 'No email';
                        this.dom.customerPhone.textContent = customer.Cust_Phone || 'No phone';
                        this.dom.customerInfo.style.display = 'block';
                    }
                } else {
                    this.dom.customerInfo.style.display = 'none';
                }
            },

            updatePaymentOptions() {
                const paymentType = document.querySelector('input[name="paymentType"]:checked').value;
                this.dom.partialAmountContainer.classList.toggle('show', paymentType === 'partial');
            },

            updatePaymentSummary() {
                const paymentType = document.querySelector('input[name="paymentType"]:checked').value;
                const grandTotal = this.state.cart.reduce((sum, item) => sum + (item.quantity * item.unitPrice) - item.discount, 0);
                let payingAmount = 0, remainingAmount = 0;

                switch (paymentType) {
                    case 'full': payingAmount = grandTotal; break;
                    case 'partial':
                        payingAmount = Math.min(parseFloat(this.dom.paidAmount.value) || 0, grandTotal);
                        remainingAmount = grandTotal - payingAmount;
                        break;
                    case 'none': remainingAmount = grandTotal; break;
                }

                this.dom.paymentSummary.style.display = (paymentType !== 'full' && this.state.cart.length > 0) ? 'block' : 'none';
                this.dom.payingAmount.textContent = `$${payingAmount.toFixed(2)}`;
                this.dom.remainingAmount.textContent = `$${remainingAmount.toFixed(2)}`;
            },

            updateUI() {
                const hasItems = this.state.cart.length > 0;
                const hasCustomer = this.dom.customerSelect.value !== '';
                const paymentType = document.querySelector('input[name="paymentType"]:checked').value;
                let canComplete = hasItems && hasCustomer;

                if (paymentType === 'partial') {
                    const paidAmount = parseFloat(this.dom.paidAmount.value) || 0;
                    const grandTotal = this.state.cart.reduce((sum, item) => sum + (item.quantity * item.unitPrice) - item.discount, 0);
                    canComplete = canComplete && paidAmount > 0 && paidAmount <= grandTotal;
                }

                this.dom.completeSaleBtn.disabled = !canComplete;
            },

            async completeSale() {
                if (this.dom.completeSaleBtn.disabled) return;

                const paymentType = document.querySelector('input[name="paymentType"]:checked').value;
                const paidAmount = paymentType === 'partial' ? parseFloat(this.dom.paidAmount.value) || 0 : null;

                const saleData = {
                    customerId: parseInt(this.dom.customerSelect.value),
                    items: this.state.cart.map(item => ({
                        productId: item.productId, quantity: item.quantity,
                        unitPrice: item.unitPrice, discount: item.discount
                    })),
                    paymentType: paymentType, paidAmount: paidAmount
                };

                this.dom.completeSaleBtn.disabled = true;
                this.dom.completeSaleBtn.innerHTML = '<div class="loading-spinner"></div> Processing...';

                try {
                    const response = await fetch('/PartialPayment/CreatePartialPaymentSale', {
                        method: 'POST', headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(saleData)
                    });
                    const result = await response.json();
                    if (result.success) this.handleSaleSuccess(result);
                    else throw new Error(result.message || 'Sale failed');
                } catch (error) {
                    this.showToast(error.message, 'error');
                    this.dom.completeSaleBtn.disabled = false;
                    this.dom.completeSaleBtn.innerHTML = '<i class="fas fa-check-circle"></i> Complete Sale';
                }
            },

            handleSaleSuccess(result) {
                this.state.currentSale = result;
                this.dom.successMessage.textContent = result.message;

                if (result.saleIds?.length) {
                    this.dom.viewInvoiceBtn.href = `/Invoice/Index?ids=${result.saleIds.join(',')}`;
                }
                this.dom.whatsappBtn.style.display = result.whatsAppUrl ? 'inline-flex' : 'none';
                if (result.whatsAppUrl) this.dom.whatsappBtn.href = result.whatsAppUrl;

                this.dom.saleCreationPanel.style.display = 'none';
                this.dom.successPanel.classList.add('show');
                this.showToast('Sale completed successfully!', 'success');
            },

            printInvoice() {
                if (this.state.currentSale?.saleIds) {
                    const printUrl = `/Invoice/Index?ids=${this.state.currentSale.saleIds.join(',')}&print=true`;
                    const printWindow = window.open(printUrl, '_blank', 'width=800,height=600');
                    if (printWindow) printWindow.onload = () => { printWindow.focus(); printWindow.print(); };
                }
            },

            async emailInvoice() {
                if (!this.state.currentSale?.saleIds) {
                    this.showToast('No sale data available', 'error'); return;
                }
                const customer = this.state.customers.find(c => c.ID == this.dom.customerSelect.value);
                if (!customer?.Email) {
                    this.showToast('No customer email available', 'error'); return;
                }

                const emailBtn = document.getElementById('emailInvoiceBtn');
                emailBtn.disabled = true;
                emailBtn.innerHTML = '<div class="loading-spinner" style="width:16px;height:16px;border-width:2px;"></div>';

                try {
                    const response = await fetch('/PartialPayment/EmailInvoice', {
                        method: 'POST', headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ saleIds: this.state.currentSale.saleIds, customerEmail: customer.Email })
                    });
                    const data = await response.json();
                    this.showToast(data.message || (data.success ? 'Invoice emailed!' : 'Email failed'), data.success ? 'success' : 'error');
                } catch (error) {
                    this.showToast('Error sending email', 'error');
                } finally {
                    emailBtn.disabled = false;
                    emailBtn.innerHTML = '<i class="fas fa-envelope"></i> Email Invoice';
                }
            },

            resetSale() {
                this.state.cart = [];
                this.state.currentSale = null;
                this.dom.customerSelect.value = '';
                this.dom.productSearch.value = '';
                this.dom.paidAmount.value = '';
                document.getElementById('fullPayment').checked = true;

                this.dom.customerInfo.style.display = 'none';
                this.dom.partialAmountContainer.classList.remove('show');
                this.dom.paymentSummary.style.display = 'none';
                this.dom.productList.style.display = 'none';

                this.renderCart();
                this.updateTotals();
                this.updateUI();

                this.dom.successPanel.classList.remove('show');
                this.dom.saleCreationPanel.style.display = 'block';

                this.dom.completeSaleBtn.disabled = true;
                this.dom.completeSaleBtn.innerHTML = '<i class="fas fa-check-circle"></i> Complete Sale';
            },

            showToast(message, type = 'success') {
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                toast.textContent = message;
                document.body.appendChild(toast);
                setTimeout(() => toast.classList.add('show'), 100);
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }
        };

        document.addEventListener('DOMContentLoaded', () => PartialPaymentApp.init());
        window.PartialPaymentApp = PartialPaymentApp;
    </script>
}

<!-- Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">