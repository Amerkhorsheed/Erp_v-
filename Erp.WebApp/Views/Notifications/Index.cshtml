@model List<Erp_V1.DAL.DAL.Notifications>
@{
    ViewBag.Title = "Notifications";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.AntiForgeryToken()

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="card-title mb-0">
                        <i class="fas fa-bell"></i> Notifications
                        @if (ViewBag.UnreadCount != null && (int)ViewBag.UnreadCount > 0)
                        {
                            <span class="badge badge-danger ml-2">@ViewBag.UnreadCount</span>
                        }
                    </h4>
                    <div class="btn-group">
                        @if ((bool)ViewBag.IsAdmin)
                        {
                            <a href="@Url.Action("Create", "Notifications")" class="btn btn-primary btn-sm">
                                <i class="fas fa-plus"></i> Create Notification
                            </a>
                        }
                        <a href="@Url.Action("Settings", "Notifications")" class="btn btn-secondary btn-sm">
                            <i class="fas fa-cog"></i> Settings
                        </a>
                    </div>
                </div>
                
                <div class="card-body">
                    <!-- Filter and Action Bar -->
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <div class="btn-group" role="group">
                                <a href="@Url.Action("Index", new { includeRead = false })" 
                                   class="btn @(!(bool)ViewBag.IncludeRead ? "btn-primary" : "btn-outline-primary") btn-sm">
                                    Unread Only
                                </a>
                                <a href="@Url.Action("Index", new { includeRead = true })" 
                                   class="btn @((bool)ViewBag.IncludeRead ? "btn-primary" : "btn-outline-primary") btn-sm">
                                    All Notifications
                                </a>
                            </div>
                            
                            @if (ViewBag.Stats != null)
                            {
                                <div class="btn-group ml-2" role="group">
                                    <button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" 
                                            data-toggle="dropdown">Filter by Type</button>
                                    <div class="dropdown-menu">
                                        <a class="dropdown-item" href="@Url.Action("Index")">All Types</a>
                                        @foreach (var stat in (Dictionary<string, int>)ViewBag.Stats)
                                        {
                                            <a class="dropdown-item" href="@Url.Action("Index", new { type = stat.Key })">
                                                @stat.Key <span class="badge badge-secondary">@stat.Value</span>
                                            </a>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <div class="col-md-4 text-right">
                            <button type="button" class="btn btn-success btn-sm" onclick="markAllAsRead()">
                                <i class="fas fa-check-double"></i> Mark All Read
                            </button>
                            <button type="button" class="btn btn-warning btn-sm" onclick="deleteAllRead()">
                                <i class="fas fa-trash"></i> Clear Read
                            </button>
                        </div>
                    </div>
                    
                    <!-- Notifications List -->
                    @if (Model != null && Model.Any())
                    {
                        <div class="notifications-list">
                            @foreach (var notification in Model)
                            {
                                <div class="notification-item @(!notification.IsRead ? "unread" : "") @GetSeverityClass(notification.Severity)" 
                                     data-id="@notification.Id">
                                    <div class="row align-items-center">
                                        <div class="col-md-1 text-center">
                                            <i class="@GetNotificationIcon(notification.Type) fa-2x"></i>
                                        </div>
                                        <div class="col-md-8">
                                            <h6 class="notification-title mb-1">
                                                @notification.Title
                                                @if (!notification.IsRead)
                                                {
                                                    <span class="badge badge-primary badge-sm ml-2">New</span>
                                                }
                                            </h6>
                                            <p class="notification-message mb-1">@notification.Message</p>
                                            <small class="text-muted">
                                                <i class="fas fa-clock"></i> @notification.Timestamp.ToString("MMM dd, yyyy HH:mm")
                                                <span class="ml-2">
                                                    <i class="fas fa-tag"></i> @notification.Type
                                                </span>
                                            </small>
                                        </div>
                                        <div class="col-md-3 text-right">
                                            <div class="btn-group">
                                                @if (!string.IsNullOrEmpty(notification.TargetUrl))
                                                {
                                                    <a href="@notification.TargetUrl" class="btn btn-outline-primary btn-sm">
                                                        <i class="fas fa-external-link-alt"></i>
                                                    </a>
                                                }
                                                <a href="@Url.Action("Details", new { id = notification.Id })" 
                                                   class="btn btn-outline-info btn-sm">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                @if (!notification.IsRead)
                                                {
                                                    <button type="button" class="btn btn-outline-success btn-sm" 
                                                            onclick="markAsRead(@notification.Id)">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                }
                                                @if ((bool)ViewBag.IsAdmin)
                                                {
                                                    <button type="button" class="btn btn-outline-danger btn-sm" 
                                                            onclick="deleteNotification(@notification.Id)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <!-- Pagination would go here if needed -->
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-bell-slash fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No notifications found</h5>
                            <p class="text-muted">You're all caught up!</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function getCsrfToken() {
            return $('input[name="__RequestVerificationToken"]').val();
        }
        function markAsRead(notificationId) {
            $.ajax({
                url: '@Url.Action("MarkAsRead", "Notifications")',
                type: 'POST',
                data: { id: notificationId, __RequestVerificationToken: getCsrfToken() },
                success: function(result) {
                    if (result.success) {
                        location.reload();
                    } else {
                        alert('Error marking notification as read: ' + (result.error || 'Unknown error'));
                    }
                },
                error: function() {
                    alert('Error marking notification as read');
                }
            });
        }
        
        function markAllAsRead() {
            if (confirm('Mark all notifications as read?')) {
                $.ajax({
                    url: '@Url.Action("MarkAllAsRead", "Notifications")',
                    type: 'POST',
                    data: { __RequestVerificationToken: getCsrfToken() },
                    success: function(result) {
                        if (result.success) {
                            location.reload();
                        } else {
                            alert('Error marking all notifications as read: ' + (result.error || 'Unknown error'));
                        }
                    },
                    error: function() {
                        alert('Error marking all notifications as read');
                    }
                });
            }
        }
        
        function deleteNotification(notificationId) {
            if (confirm('Are you sure you want to delete this notification?')) {
                $.ajax({
                    url: '@Url.Action("Delete", "Notifications")',
                    type: 'POST',
                    data: { id: notificationId, __RequestVerificationToken: getCsrfToken() },
                    success: function(result) {
                        if (result.success) {
                            location.reload();
                        } else {
                            alert('Error deleting notification: ' + (result.error || 'Unknown error'));
                        }
                    },
                    error: function() {
                        alert('Error deleting notification');
                    }
                });
            }
        }
        
        function deleteAllRead() {
            if (confirm('Delete all read notifications? This action cannot be undone.')) {
                $.ajax({
                    url: '@Url.Action("DeleteAllRead", "Notifications")',
                    type: 'POST',
                    data: { __RequestVerificationToken: getCsrfToken() },
                    success: function(result) {
                        if (result.success) {
                            location.reload();
                        } else {
                            alert('Error deleting read notifications: ' + (result.error || 'Unknown error'));
                        }
                    },
                    error: function() {
                        alert('Error deleting read notifications');
                    }
                });
            }
        }
    </script>
}

@section Styles {
    <style>
        .notification-item {
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            background-color: #fff;
            transition: all 0.3s ease;
        }
        
        .notification-item:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transform: translateY(-1px);
        }
        
        .notification-item.unread {
            border-left: 4px solid #007bff;
            background-color: #f8f9ff;
        }
        
        .notification-item.severity-warning {
            border-left-color: #ffc107;
        }
        
        .notification-item.severity-error {
            border-left-color: #dc3545;
        }
        
        .notification-item.severity-success {
            border-left-color: #28a745;
        }
        
        .notification-title {
            font-weight: 600;
            color: #333;
        }
        
        .notification-message {
            color: #666;
            line-height: 1.4;
        }
        
        .notifications-list {
            max-height: 600px;
            overflow-y: auto;
        }
    </style>
}

@functions {
    public string GetNotificationIcon(string type)
    {
        switch (type?.ToLower())
        {
            case "info": return "fas fa-info-circle text-info";
            case "warning": return "fas fa-exclamation-triangle text-warning";
            case "error": return "fas fa-times-circle text-danger";
            case "success": return "fas fa-check-circle text-success";
            case "system": return "fas fa-cog text-secondary";
            case "lowstock": return "fas fa-box text-warning";
            case "salestarget": return "fas fa-chart-line text-info";
            case "paymentreminder": return "fas fa-money-bill text-warning";
            default: return "fas fa-bell text-primary";
        }
    }
    
    public string GetSeverityClass(string severity)
    {
        return $"severity-{severity?.ToLower()}";
    }
}