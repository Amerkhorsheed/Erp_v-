@model Erp.WebApp.ViewModels.InvoiceManagementViewModel
@{
    ViewBag.Title = "Invoice Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    :root {
        --primary-color: #2563eb;
        --primary-hover: #1d4ed8;
        --success-color: #10b981;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --info-color: #06b6d4;
        --light-bg: #f8fafc;
        --border-color: #e2e8f0;
        --text-primary: #1e293b;
        --text-secondary: #64748b;
        --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .invoice-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }

    .invoice-header {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow-lg);
    }

    .invoice-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--text-primary);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

        .invoice-title i {
            color: var(--primary-color);
        }

    .invoice-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-top: 2rem;
    }

    .stat-card {
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: var(--shadow);
        transition: transform 0.2s ease;
    }

        .stat-card:hover {
            transform: translateY(-2px);
        }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .stat-label {
        color: var(--text-secondary);
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .stat-draft .stat-number {
        color: var(--text-secondary);
    }

    .stat-pending .stat-number {
        color: var(--warning-color);
    }

    .stat-paid .stat-number {
        color: var(--success-color);
    }

    .stat-overdue .stat-number {
        color: var(--danger-color);
    }

    .invoice-controls {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow);
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .filter-controls {
        display: flex;
        gap: 1rem;
        align-items: center;
        flex-wrap: wrap;
    }

    .filter-select {
        padding: 0.5rem 1rem;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        background: white;
        font-size: 0.875rem;
        min-width: 120px;
    }

    .search-box {
        position: relative;
    }

    .search-input {
        padding: 0.5rem 1rem 0.5rem 2.5rem;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        width: 250px;
        font-size: 0.875rem;
    }

    .search-icon {
        position: absolute;
        left: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-secondary);
    }

    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

        .btn-primary:hover {
            background: var(--primary-hover);
        }

    .btn-success {
        background: var(--success-color);
        color: white;
    }

    .btn-warning {
        background: var(--warning-color);
        color: white;
    }

    .btn-danger {
        background: var(--danger-color);
        color: white;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .invoice-table-container {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: var(--shadow-lg);
    }

    .invoice-table {
        width: 100%;
        border-collapse: collapse;
    }

        .invoice-table th {
            background: var(--light-bg);
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: var(--text-primary);
            border-bottom: 1px solid var(--border-color);
        }

        .invoice-table td {
            padding: 1rem;
            border-bottom: 1px solid var(--border-color);
            vertical-align: middle;
        }

        .invoice-table tbody tr:hover {
            background: var(--light-bg);
        }

    .invoice-number {
        font-weight: 600;
        color: var(--primary-color);
    }

    .invoice-state {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .state-draft {
        background: #f1f5f9;
        color: #475569;
    }

    .state-pending {
        background: #fef3c7;
        color: #92400e;
    }

    .state-paid {
        background: #d1fae5;
        color: #065f46;
    }

    .state-overdue {
        background: #fee2e2;
        color: #991b1b;
    }

    .state-cancelled {
        background: #f1f5f9;
        color: #475569;
    }

    .amount {
        font-weight: 600;
        text-align: right;
    }

    .actions {
        display: flex;
        gap: 0.5rem;
        justify-content: center;
    }

    .loading {
        text-align: center;
        padding: 2rem;
        color: var(--text-secondary);
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        color: var(--text-secondary);
    }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.3;
        }

    @@media (max-width: 768px) {
        .invoice-container {
            padding: 1rem;
        }

        .invoice-title {
            font-size: 2rem;
        }

        .invoice-controls {
            flex-direction: column;
            align-items: stretch;
        }

        .filter-controls {
            justify-content: center;
        }

        .search-input {
            width: 100%;
        }

        .invoice-table-container {
            overflow-x: auto;
        }

        .invoice-table {
            min-width: 800px;
        }
    }
</style>

<div class="invoice-container">
    <div class="invoice-header">
        <h1 class="invoice-title">
            <i class="fas fa-file-invoice"></i>
            Invoice Management
        </h1>

        <div class="invoice-stats">
            <div class="stat-card stat-draft">
                <div class="stat-number" id="draftCount">0</div>
                <div class="stat-label">Draft</div>
            </div>
            <div class="stat-card stat-pending">
                <div class="stat-number" id="pendingCount">0</div>
                <div class="stat-label">Pending</div>
            </div>
            <div class="stat-card stat-paid">
                <div class="stat-number" id="paidCount">0</div>
                <div class="stat-label">Paid</div>
            </div>
            <div class="stat-card stat-overdue">
                <div class="stat-number" id="overdueCount">0</div>
                <div class="stat-label">Overdue</div>
            </div>
        </div>
    </div>

    <div class="invoice-controls">
        <div class="filter-controls">
            <select class="filter-select" id="stateFilter">
                <option value="">All States</option>
                <option value="Draft">Draft</option>
                <option value="Pending">Pending</option>
                <option value="Paid">Paid</option>
                <option value="Overdue">Overdue</option>
                <option value="Cancelled">Cancelled</option>
            </select>

            <select class="filter-select" id="customerFilter">
                <option value="">All Customers</option>
                @foreach (var customer in Model.Customers)
                {
                    <option value="@customer.ID">@customer.CustomerName</option>
                }
            </select>

            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text" class="search-input" id="searchInput" placeholder="Search invoices...">
            </div>
        </div>

        <div>
            <a href="@Url.Action("Create", "InvoiceManagement")" class="btn btn-primary">
                <i class="fas fa-plus"></i>
                Create Invoice
            </a>
        </div>
    </div>

    <div class="invoice-table-container">
        <table class="invoice-table">
            <thead>
                <tr>
                    <th>Invoice #</th>
                    <th>Customer</th>
                    <th>Date</th>
                    <th>Due Date</th>
                    <th>Total</th>
                    <th>Paid</th>
                    <th>Remaining</th>
                    <th>State</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="invoiceTableBody">
                <!-- Invoice rows will be populated by JavaScript -->
            </tbody>
        </table>

        <div id="loadingState" class="loading" style="display: none;">
            <i class="fas fa-spinner fa-spin"></i>
            Loading invoices...
        </div>

        <div id="emptyState" class="empty-state" style="display: none;">
            <i class="fas fa-file-invoice"></i>
            <h3>No invoices found</h3>
            <p>Create your first invoice to get started</p>
        </div>
    </div>
</div>

@section scripts {
<script>
    $(document).ready(function() {
        // Initialize invoice data with error handling
        let invoices = [];
        let customers = [];

        try {
            invoices = @Html.Raw(Json.Encode(Model.Invoices)) || [];
            customers = @Html.Raw(Json.Encode(Model.Customers)) || [];
        } catch (e) {
            console.error('Error parsing invoice data:', e);
            invoices = [];
            customers = [];
        }

        let filteredInvoices = invoices;

        // Initialize the page
        updateStats();
        renderInvoiceTable();

        // Event listeners
        $('#stateFilter, #customerFilter').on('change', filterInvoices);
        $('#searchInput').on('input', debounce(filterInvoices, 300));

        function updateStats() {
            try {
                const stats = {
                    draft: invoices.filter(i => i && i.InvoiceState === 'Draft').length,
                    pending: invoices.filter(i => i && i.InvoiceState === 'Pending').length,
                    paid: invoices.filter(i => i && i.InvoiceState === 'Paid').length,
                    overdue: invoices.filter(i => i && i.InvoiceState === 'Overdue').length
                };

                $('#draftCount').text(stats.draft);
                $('#pendingCount').text(stats.pending);
                $('#paidCount').text(stats.paid);
                $('#overdueCount').text(stats.overdue);
            } catch (e) {
                console.error('Error updating stats:', e);
                // Set default values if there's an error
                $('#draftCount').text('0');
                $('#pendingCount').text('0');
                $('#paidCount').text('0');
                $('#overdueCount').text('0');
            }
        }

        function filterInvoices() {
            try {
                const stateFilter = $('#stateFilter').val();
                const customerFilter = $('#customerFilter').val();
                const searchTerm = $('#searchInput').val().toLowerCase();

                filteredInvoices = invoices.filter(invoice => {
                    if (!invoice) return false;

                    const matchesState = !stateFilter || invoice.InvoiceState === stateFilter;
                    const matchesCustomer = !customerFilter || (invoice.CustomerID && invoice.CustomerID.toString() === customerFilter);
                    const matchesSearch = !searchTerm ||
                        (invoice.InvoiceNumber && invoice.InvoiceNumber.toLowerCase().includes(searchTerm)) ||
                        (invoice.CustomerName && invoice.CustomerName.toLowerCase().includes(searchTerm)) ||
                        (invoice.Notes && invoice.Notes.toLowerCase().includes(searchTerm));

                    return matchesState && matchesCustomer && matchesSearch;
                });

                renderInvoiceTable();
            } catch (e) {
                console.error('Error filtering invoices:', e);
                // Fallback to show all invoices if filtering fails
                filteredInvoices = invoices || [];
                renderInvoiceTable();
            }
        }

        function renderInvoiceTable() {
            const tbody = $('#invoiceTableBody');
            const emptyState = $('#emptyState');

            if (filteredInvoices.length === 0) {
                tbody.empty();
                emptyState.show();
                return;
            }

            emptyState.hide();

            const rows = filteredInvoices.map(invoice => {
                let invoiceDate = 'N/A';
                let dueDate = 'N/A';

                try {
                    if (invoice.InvoiceDate) {
                        invoiceDate = new Date(invoice.InvoiceDate).toLocaleDateString();
                    }
                    if (invoice.DueDate) {
                        dueDate = new Date(invoice.DueDate).toLocaleDateString();
                    }
                } catch (e) {
                    console.warn('Date parsing error for invoice:', invoice.InvoiceID, e);
                }

                const isOverdue = invoice.DueDate && new Date(invoice.DueDate) < new Date() && invoice.InvoiceState !== 'Paid';

                return `
                    <tr>
                        <td><span class="invoice-number">${invoice.InvoiceNumber || 'N/A'}</span></td>
                        <td>${invoice.CustomerName || 'N/A'}</td>
                        <td>${invoiceDate}</td>
                        <td>${dueDate}</td>
                        <td class="amount">$${(invoice.TotalAmount || 0).toFixed(2)}</td>
                        <td class="amount">$${(invoice.PaidAmount || 0).toFixed(2)}</td>
                        <td class="amount">$${(invoice.RemainingAmount || 0).toFixed(2)}</td>
                        <td>
                            <span class="invoice-state state-${(invoice.InvoiceState || 'draft').toLowerCase()}">
                                ${invoice.InvoiceState || 'Draft'}
                            </span>
                        </td>
                        <td class="actions">
                            <button class="btn btn-sm btn-primary" onclick="editInvoice(${invoice.InvoiceID || 0})" ${!invoice.InvoiceID ? 'disabled' : ''}>
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-success" onclick="updateState(${invoice.InvoiceID || 0}, 'Paid')"
                                    ${invoice.InvoiceState === 'Paid' || !invoice.InvoiceID ? 'disabled' : ''}>
                                <i class="fas fa-check"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteInvoice(${invoice.InvoiceID || 0})" ${!invoice.InvoiceID ? 'disabled' : ''}>
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');

            tbody.html(rows);
        }

        // Global functions for button actions
        window.editInvoice = function(invoiceId) {
            if (!invoiceId || invoiceId === 0) {
                alert('Invalid invoice ID');
                return;
            }
            window.location.href = '@Url.Action("Edit", "InvoiceManagement")/' + invoiceId;
        };

        window.updateState = function(invoiceId, newState) {
            if (!invoiceId || invoiceId === 0) {
                alert('Invalid invoice ID');
                return;
            }
            if (confirm(`Are you sure you want to mark this invoice as ${newState}?`)) {
                $.post('@Url.Action("UpdateState", "InvoiceManagement")', {
                    invoiceId: invoiceId,
                    newState: newState
                })
                .done(function(response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                })
                .fail(function() {
                    alert('Error updating invoice state');
                });
            }
        };

        window.deleteInvoice = function(invoiceId) {
            if (!invoiceId || invoiceId === 0) {
                alert('Invalid invoice ID');
                return;
            }
            if (confirm('Are you sure you want to delete this invoice? This action cannot be undone.')) {
                $.post('@Url.Action("Delete", "InvoiceManagement")/' + invoiceId)
                .done(function(response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                })
                .fail(function() {
                    alert('Error deleting invoice');
                });
            }
        };

        // Utility function for debouncing
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    });
</script>
}