@model Erp.WebApp.ViewModels.CreateInvoiceViewModel
@{
    ViewBag.Title = "Create Invoice";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    :root {
        --primary-color: #2563eb;
        --primary-hover: #1d4ed8;
        --success-color: #10b981;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --light-bg: #f8fafc;
        --border-color: #e2e8f0;
        --text-primary: #1e293b;
        --text-secondary: #64748b;
        --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .create-invoice-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }

    .create-invoice-header {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow-lg);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .create-invoice-title {
        font-size: 2rem;
        font-weight: 700;
        color: var(--text-primary);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .create-invoice-title i {
        color: var(--primary-color);
    }

    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-secondary {
        background: #6b7280;
        color: white;
    }

    .btn-secondary:hover {
        background: #4b5563;
    }

    .invoice-form {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: var(--shadow-lg);
    }

    .form-section {
        margin-bottom: 2rem;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid var(--border-color);
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        display: block;
        font-weight: 500;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        font-size: 0.875rem;
        transition: border-color 0.2s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
    }

    .form-control.is-invalid {
        border-color: var(--danger-color);
    }

    .invalid-feedback {
        color: var(--danger-color);
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }

    .items-section {
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 1.5rem;
        background: var(--light-bg);
    }

    .items-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .btn-success {
        background: var(--success-color);
        color: white;
    }

    .btn-success:hover {
        background: #059669;
    }

    .items-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 6px;
        overflow: hidden;
        box-shadow: var(--shadow);
    }

    .items-table th {
        background: var(--light-bg);
        padding: 0.75rem;
        text-align: left;
        font-weight: 600;
        color: var(--text-primary);
        border-bottom: 1px solid var(--border-color);
    }

    .items-table td {
        padding: 0.75rem;
        border-bottom: 1px solid var(--border-color);
        vertical-align: middle;
    }

    .item-input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        font-size: 0.875rem;
    }

    .btn-danger {
        background: var(--danger-color);
        color: white;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .btn-danger:hover {
        background: #dc2626;
    }

    .totals-section {
        background: var(--light-bg);
        border-radius: 8px;
        padding: 1.5rem;
        margin-top: 2rem;
    }

    .totals-grid {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 1rem;
        align-items: end;
    }

    .total-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid var(--border-color);
    }

    .total-row:last-child {
        border-bottom: none;
        font-weight: 600;
        font-size: 1.125rem;
        color: var(--primary-color);
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid var(--border-color);
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
        padding: 0.75rem 2rem;
    }

    .btn-primary:hover {
        background: var(--primary-hover);
    }

    .empty-items {
        text-align: center;
        padding: 2rem;
        color: var(--text-secondary);
    }

    @@media (max-width: 768px) {
        .create-invoice-container {
            padding: 1rem;
        }

        .create-invoice-header {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        .items-table {
            font-size: 0.75rem;
        }

        .totals-grid {
            grid-template-columns: 1fr;
        }

        .form-actions {
            flex-direction: column;
        }
    }
</style>

<div class="create-invoice-container">
    <div class="create-invoice-header">
        <h1 class="create-invoice-title">
            <i class="fas fa-plus-circle"></i>
            Create New Invoice
        </h1>
        <a href="@Url.Action("Index", "InvoiceManagement")" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i>
            Back to Invoices
        </a>
    </div>

    @using (Html.BeginForm("Create", "InvoiceManagement", FormMethod.Post, new { @class = "invoice-form-container" }))
    {
        @Html.AntiForgeryToken()
        
        <div class="invoice-form">
            <!-- Invoice Information Section -->
            <div class="form-section">
                <h3 class="section-title">Invoice Information</h3>
                <div class="form-grid">
                    <div class="form-group">
                        @Html.LabelFor(m => m.CustomerID, "Customer", new { @class = "form-label" })
                        @Html.DropDownListFor(m => m.CustomerID, 
                            new SelectList(Model.Customers, "ID", "CustomerName"), 
                            "Select Customer", 
                            new { @class = "form-control", @id = "customerSelect" })
                        @Html.ValidationMessageFor(m => m.CustomerID, "", new { @class = "invalid-feedback" })
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(m => m.InvoiceDate, "Invoice Date", new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.InvoiceDate, "{0:yyyy-MM-dd}", 
                            new { @class = "form-control", @type = "date" })
                        @Html.ValidationMessageFor(m => m.InvoiceDate, "", new { @class = "invalid-feedback" })
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(m => m.DueDate, "Due Date", new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.DueDate, "{0:yyyy-MM-dd}", 
                            new { @class = "form-control", @type = "date" })
                        @Html.ValidationMessageFor(m => m.DueDate, "", new { @class = "invalid-feedback" })
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(m => m.InvoiceState, "Invoice State", new { @class = "form-label" })
                        @Html.DropDownListFor(m => m.InvoiceState, 
                            new SelectList(new[] { "Draft", "Pending", "Paid", "Overdue", "Cancelled" }), 
                            "Select State", 
                            new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.InvoiceState, "", new { @class = "invalid-feedback" })
                    </div>
                </div>
                
                <div class="form-group">
                    @Html.LabelFor(m => m.Notes, "Notes", new { @class = "form-label" })
                    @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", @rows = "3", @placeholder = "Additional notes or comments..." })
                    @Html.ValidationMessageFor(m => m.Notes, "", new { @class = "invalid-feedback" })
                </div>
            </div>

            <!-- Invoice Items Section -->
            <div class="form-section">
                <div class="items-section">
                    <div class="items-header">
                        <h3 class="section-title" style="margin: 0; border: none; padding: 0;">Invoice Items</h3>
                        <button type="button" class="btn btn-success" id="addItemBtn">
                            <i class="fas fa-plus"></i>
                            Add Item
                        </button>
                    </div>
                    
                    <div id="itemsContainer">
                        <table class="items-table" id="itemsTable" style="display: none;">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Category</th>
                                    <th>Quantity</th>
                                    <th>Unit Price</th>
                                    <th>Discount %</th>
                                    <th>Line Total</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="itemsTableBody">
                                <!-- Items will be added dynamically -->
                            </tbody>
                        </table>
                        
                        <div id="emptyItemsMessage" class="empty-items">
                            <i class="fas fa-shopping-cart" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                            <p>No items added yet. Click "Add Item" to get started.</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Totals Section -->
            <div class="totals-section">
                <div class="totals-grid">
                    <div></div>
                    <div style="min-width: 300px;">
                        <div class="total-row">
                            <span>Subtotal:</span>
                            <span id="subtotalAmount">$0.00</span>
                        </div>
                        <div class="total-row">
                            <span>Total Discount:</span>
                            <span id="totalDiscount">$0.00</span>
                        </div>
                        <div class="total-row">
                            <span>Total Amount:</span>
                            <span id="totalAmount">$0.00</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="form-actions">
                <a href="@Url.Action("Index", "InvoiceManagement")" class="btn btn-secondary">
                    Cancel
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i>
                    Create Invoice
                </button>
            </div>
        </div>
    }
</div>

<script>
    $(document).ready(function() {
        // Initialize data
        const products = @Html.Raw(Json.Encode(Model.Products));
        const categories = @Html.Raw(Json.Encode(Model.Categories));
        
        let itemCounter = 0;
        let items = [];
        
        // Set default dates
        const today = new Date().toISOString().split('T')[0];
        const nextMonth = new Date();
        nextMonth.setMonth(nextMonth.getMonth() + 1);
        const dueDate = nextMonth.toISOString().split('T')[0];
        
        $('#InvoiceDate').val(today);
        $('#DueDate').val(dueDate);
        
        // Add item button click
        $('#addItemBtn').click(function() {
            addNewItem();
        });
        
        function addNewItem() {
            itemCounter++;
            
            const productOptions = products.map(p => 
                `<option value="${p.ID}" data-price="${p.ProductSalesPrice}" data-category="${p.CategoryID}">${p.ProductName}</option>`
            ).join('');
            
            const categoryOptions = categories.map(c => 
                `<option value="${c.ID}">${c.CategoryName}</option>`
            ).join('');
            
            const newRow = `
                <tr data-item-id="${itemCounter}">
                    <td>
                        <select class="item-input product-select" name="Items[${itemCounter}].ProductID" required>
                            <option value="">Select Product</option>
                            ${productOptions}
                        </select>
                    </td>
                    <td>
                        <select class="item-input category-select" name="Items[${itemCounter}].CategoryID" required>
                            <option value="">Select Category</option>
                            ${categoryOptions}
                        </select>
                    </td>
                    <td>
                        <input type="number" class="item-input quantity-input" 
                               name="Items[${itemCounter}].Quantity" 
                               min="1" step="1" value="1" required>
                    </td>
                    <td>
                        <input type="number" class="item-input price-input" 
                               name="Items[${itemCounter}].UnitPrice" 
                               min="0" step="0.01" value="0.00" required>
                    </td>
                    <td>
                        <input type="number" class="item-input discount-input" 
                               name="Items[${itemCounter}].DiscountPercentage" 
                               min="0" max="100" step="0.01" value="0.00">
                    </td>
                    <td>
                        <span class="line-total">$0.00</span>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger remove-item">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `;
            
            $('#itemsTableBody').append(newRow);
            $('#itemsTable').show();
            $('#emptyItemsMessage').hide();
            
            // Bind events for the new row
            bindItemEvents();
            updateTotals();
        }
        
        function bindItemEvents() {
            // Product selection change
            $('.product-select').off('change').on('change', function() {
                const selectedOption = $(this).find('option:selected');
                const price = selectedOption.data('price') || 0;
                const categoryId = selectedOption.data('category') || '';
                
                const row = $(this).closest('tr');
                row.find('.price-input').val(price.toFixed(2));
                row.find('.category-select').val(categoryId);
                
                calculateLineTotal(row);
            });
            
            // Quantity, price, discount change
            $('.quantity-input, .price-input, .discount-input').off('input').on('input', function() {
                const row = $(this).closest('tr');
                calculateLineTotal(row);
            });
            
            // Remove item
            $('.remove-item').off('click').on('click', function() {
                $(this).closest('tr').remove();
                
                if ($('#itemsTableBody tr').length === 0) {
                    $('#itemsTable').hide();
                    $('#emptyItemsMessage').show();
                }
                
                updateTotals();
            });
        }
        
        function calculateLineTotal(row) {
            const quantity = parseFloat(row.find('.quantity-input').val()) || 0;
            const unitPrice = parseFloat(row.find('.price-input').val()) || 0;
            const discountPercent = parseFloat(row.find('.discount-input').val()) || 0;
            
            const subtotal = quantity * unitPrice;
            const discountAmount = subtotal * (discountPercent / 100);
            const lineTotal = subtotal - discountAmount;
            
            row.find('.line-total').text('$' + lineTotal.toFixed(2));
            
            updateTotals();
        }
        
        function updateTotals() {
            let subtotal = 0;
            let totalDiscount = 0;
            
            $('#itemsTableBody tr').each(function() {
                const quantity = parseFloat($(this).find('.quantity-input').val()) || 0;
                const unitPrice = parseFloat($(this).find('.price-input').val()) || 0;
                const discountPercent = parseFloat($(this).find('.discount-input').val()) || 0;
                
                const itemSubtotal = quantity * unitPrice;
                const itemDiscount = itemSubtotal * (discountPercent / 100);
                
                subtotal += itemSubtotal;
                totalDiscount += itemDiscount;
            });
            
            const totalAmount = subtotal - totalDiscount;
            
            $('#subtotalAmount').text('$' + subtotal.toFixed(2));
            $('#totalDiscount').text('$' + totalDiscount.toFixed(2));
            $('#totalAmount').text('$' + totalAmount.toFixed(2));
        }
        
        // Form validation and AJAX submission
        $('form').submit(function(e) {
            e.preventDefault(); // Always prevent default form submission
            
            console.log('Form submission started');
            
            if ($('#itemsTableBody tr').length === 0) {
                alert('Please add at least one item to the invoice.');
                return false;
            }
            
            // Validate all required fields
            let isValid = true;
            $(this).find('[required]').each(function() {
                if (!$(this).val()) {
                    isValid = false;
                    $(this).addClass('is-invalid');
                } else {
                    $(this).removeClass('is-invalid');
                }
            });
            
            if (!isValid) {
                alert('Please fill in all required fields.');
                return false;
            }
            
            // Prepare form data
            const formData = {
                CustomerId: $('#CustomerID').val(),
                InvoiceDate: $('#InvoiceDate').val(),
                DueDate: $('#DueDate').val(),
                InvoiceState: $('#InvoiceState').val(),
                Notes: $('#Notes').val(),
                TaxAmount: parseFloat($('#TaxAmount').val()) || 0,
                DiscountAmount: parseFloat($('#DiscountAmount').val()) || 0,
                Items: []
            };
            
            // Collect items data
            $('#itemsTableBody tr').each(function() {
                const row = $(this);
                const item = {
                    ProductId: parseInt(row.find('.product-select').val()),
                    CategoryId: parseInt(row.find('.category-select').val()),
                    ProductName: row.find('.product-select option:selected').text(),
                    Description: '', // Add description field if needed
                    Quantity: parseInt(row.find('.quantity-input').val()),
                    UnitPrice: parseFloat(row.find('.price-input').val()),
                    DiscountPercentage: parseFloat(row.find('.discount-input').val()) || 0,
                    DiscountAmount: 0 // Will be calculated on server
                };
                formData.Items.push(item);
            });
            
            console.log('Form data prepared:', formData);
            
            // Disable submit button
            const submitBtn = $(this).find('button[type="submit"]');
            submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Creating...');
            
            // Create form data for submission
            const form = $(this);
            const serializedData = form.serialize();
            
            // Submit via AJAX
            $.ajax({
                url: '@Url.Action("Create", "InvoiceManagement")',
                type: 'POST',
                data: serializedData,
                dataType: 'json',
                success: function(response) {
                    console.log('Server response:', response);
                    if (response.success) {
                        alert('Invoice created successfully!');
                        window.location.href = '@Url.Action("Index", "InvoiceManagement")';
                    } else {
                        alert('Error: ' + response.message);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX Error:', xhr.responseText);
                    alert('An error occurred while creating the invoice. Please check the console for details.');
                },
                complete: function() {
                    // Re-enable submit button
                    submitBtn.prop('disabled', false).html('<i class="fas fa-save"></i> Create Invoice');
                }
            });
        });
        
        // Add first item by default
        addNewItem();
    });
</script>